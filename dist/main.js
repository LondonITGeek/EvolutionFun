!function(c){var n={};function t(r){if(n[r])return n[r].exports;var e=n[r]={i:r,l:!1,exports:{}};return c[r].call(e.exports,e,e.exports,t),e.l=!0,e.exports}t.m=c,t.c=n,t.d=function(c,n,r){t.o(c,n)||Object.defineProperty(c,n,{enumerable:!0,get:r})},t.r=function(c){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(c,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(c,"__esModule",{value:!0})},t.t=function(c,n){if(1&n&&(c=t(c)),8&n)return c;if(4&n&&"object"==typeof c&&c&&c.__esModule)return c;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:c}),2&n&&"string"!=typeof c)for(var e in c)t.d(r,e,function(n){return c[n]}.bind(null,e));return r},t.n=function(c){var n=c&&c.__esModule?function(){return c.default}:function(){return c};return t.d(n,"a",n),n},t.o=function(c,n){return Object.prototype.hasOwnProperty.call(c,n)},t.p="",t(t.s=0)}([function(module,exports,__webpack_require__){eval("const { default: Simulation } = __webpack_require__(3);\r\nconst { default: SuccessCriteria } = __webpack_require__(1);\r\nconst { SuccessCriteriaVisualization } = __webpack_require__(2);\r\n\r\nvar successCriteriaVisualization = new SuccessCriteriaVisualization(SuccessCriteria.rightAndLeftWallSuccess());\r\nvar simulation = new Simulation(2000, 200, 300, 40, 2, 3, 0.001, successCriteriaVisualization);\r\nsimulation.start();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLHNCQUFzQixHQUFHLG1CQUFPLENBQUMsQ0FBYztBQUN0RCxPQUFPLDJCQUEyQixHQUFHLG1CQUFPLENBQUMsQ0FBb0I7QUFDakUsT0FBTywrQkFBK0IsR0FBRyxtQkFBTyxDQUFDLENBQWtDOztBQUVuRjtBQUNBO0FBQ0EiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZGVmYXVsdDogU2ltdWxhdGlvbiB9ID0gcmVxdWlyZShcIi4vc2ltdWxhdGlvblwiKTtcclxuY29uc3QgeyBkZWZhdWx0OiBTdWNjZXNzQ3JpdGVyaWEgfSA9IHJlcXVpcmUoXCIuL3N1Y2Nlc3MtY3JpdGVyaWFcIik7XHJcbmNvbnN0IHsgU3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbiB9ID0gcmVxdWlyZShcIi4vc3VjY2Vzcy1jcml0ZXJpYS12aXN1YWxpemF0aW9uXCIpO1xyXG5cclxudmFyIHN1Y2Nlc3NDcml0ZXJpYVZpc3VhbGl6YXRpb24gPSBuZXcgU3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbihTdWNjZXNzQ3JpdGVyaWEucmlnaHRBbmRMZWZ0V2FsbFN1Y2Nlc3MoKSk7XHJcbnZhciBzaW11bGF0aW9uID0gbmV3IFNpbXVsYXRpb24oMjAwMCwgMjAwLCAzMDAsIDQwLCAyLCAzLCAwLjAwMSwgc3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbik7XHJcbnNpbXVsYXRpb24uc3RhcnQoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SuccessCriteria; });\nclass SuccessCriteria {\r\n  static topRightCornerSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 440,\r\n        y: 0,\r\n        width: 200,\r\n        height: 200,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static topLeftCornerSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 0,\r\n        width: 200,\r\n        height: 200,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static bottomRightCornerSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 440,\r\n        y: 440,\r\n        width: 200,\r\n        height: 200,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static bottomLeftCornerSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 440,\r\n        width: 200,\r\n        height: 200,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static rightWallSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 540,\r\n        y: 0,\r\n        width: 100,\r\n        height: 640,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static leftWallSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 0,\r\n        width: 100,\r\n        height: 640,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static allCornersSuccess() {\r\n    return [\r\n      ...this.topLeftCornerSuccess(),\r\n      ...this.topRightCornerSuccess(),\r\n      ...this.bottomLeftCornerSuccess(),\r\n      ...this.bottomRightCornerSuccess(),\r\n    ];\r\n  }\r\n\r\n  static rightAndLeftWallSuccess() {\r\n    return [...SuccessCriteria.rightWallSuccess(), ...SuccessCriteria.leftWallSuccess()];\r\n  }\r\n\r\n  static topWallSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 0,\r\n        width: 640,\r\n        height: 100,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static topAndBottomWallSuccess() {\r\n    return [\r\n      ...SuccessCriteria.topWallSuccess(),\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 540,\r\n        width: 640,\r\n        height: 100,\r\n      },\r\n    ];\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3VjY2Vzcy1jcml0ZXJpYS5qcz85MTU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTdWNjZXNzQ3JpdGVyaWEge1xyXG4gIHN0YXRpYyB0b3BSaWdodENvcm5lclN1Y2Nlc3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3VyOiBcImdyZWVuXCIsXHJcbiAgICAgICAgeDogNDQwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICBoZWlnaHQ6IDIwMCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9wTGVmdENvcm5lclN1Y2Nlc3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3VyOiBcImdyZWVuXCIsXHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgaGVpZ2h0OiAyMDAsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJvdHRvbVJpZ2h0Q29ybmVyU3VjY2VzcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHtcclxuICAgICAgICBib3JkZXJDb2xvdXI6IFwiZ3JlZW5cIixcclxuICAgICAgICB4OiA0NDAsXHJcbiAgICAgICAgeTogNDQwLFxyXG4gICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgaGVpZ2h0OiAyMDAsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJvdHRvbUxlZnRDb3JuZXJTdWNjZXNzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAge1xyXG4gICAgICAgIGJvcmRlckNvbG91cjogXCJncmVlblwiLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogNDQwLFxyXG4gICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgaGVpZ2h0OiAyMDAsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJpZ2h0V2FsbFN1Y2Nlc3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3VyOiBcImdyZWVuXCIsXHJcbiAgICAgICAgeDogNTQwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgd2lkdGg6IDEwMCxcclxuICAgICAgICBoZWlnaHQ6IDY0MCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbGVmdFdhbGxTdWNjZXNzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAge1xyXG4gICAgICAgIGJvcmRlckNvbG91cjogXCJncmVlblwiLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3aWR0aDogMTAwLFxyXG4gICAgICAgIGhlaWdodDogNjQwLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhbGxDb3JuZXJzU3VjY2VzcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIC4uLnRoaXMudG9wTGVmdENvcm5lclN1Y2Nlc3MoKSxcclxuICAgICAgLi4udGhpcy50b3BSaWdodENvcm5lclN1Y2Nlc3MoKSxcclxuICAgICAgLi4udGhpcy5ib3R0b21MZWZ0Q29ybmVyU3VjY2VzcygpLFxyXG4gICAgICAuLi50aGlzLmJvdHRvbVJpZ2h0Q29ybmVyU3VjY2VzcygpLFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByaWdodEFuZExlZnRXYWxsU3VjY2VzcygpIHtcclxuICAgIHJldHVybiBbLi4uU3VjY2Vzc0NyaXRlcmlhLnJpZ2h0V2FsbFN1Y2Nlc3MoKSwgLi4uU3VjY2Vzc0NyaXRlcmlhLmxlZnRXYWxsU3VjY2VzcygpXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB0b3BXYWxsU3VjY2VzcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHtcclxuICAgICAgICBib3JkZXJDb2xvdXI6IFwiZ3JlZW5cIixcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgd2lkdGg6IDY0MCxcclxuICAgICAgICBoZWlnaHQ6IDEwMCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9wQW5kQm90dG9tV2FsbFN1Y2Nlc3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAuLi5TdWNjZXNzQ3JpdGVyaWEudG9wV2FsbFN1Y2Nlc3MoKSxcclxuICAgICAge1xyXG4gICAgICAgIGJvcmRlckNvbG91cjogXCJncmVlblwiLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogNTQwLFxyXG4gICAgICAgIHdpZHRoOiA2NDAsXHJcbiAgICAgICAgaGVpZ2h0OiAxMDAsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SuccessCriteriaVisualization", function() { return SuccessCriteriaVisualization; });\nclass SuccessCriteriaVisualization {\r\n  constructor(successCriteria) {\r\n    this.successCriteria = successCriteria;\r\n  }\r\n\r\n  drawer(ctx) {\r\n    this.successCriteria.forEach((criteria) => {\r\n      ctx.lineWidth = 3;\r\n      ctx.strokeStyle = criteria.borderColour;\r\n      ctx.beginPath();\r\n      ctx.rect(criteria.x, criteria.y, criteria.width, criteria.height);\r\n      ctx.stroke();\r\n    });\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3VjY2Vzcy1jcml0ZXJpYS12aXN1YWxpemF0aW9uLmpzP2Y1ZDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTdWNjZXNzQ3JpdGVyaWFWaXN1YWxpemF0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihzdWNjZXNzQ3JpdGVyaWEpIHtcclxuICAgIHRoaXMuc3VjY2Vzc0NyaXRlcmlhID0gc3VjY2Vzc0NyaXRlcmlhO1xyXG4gIH1cclxuXHJcbiAgZHJhd2VyKGN0eCkge1xyXG4gICAgdGhpcy5zdWNjZXNzQ3JpdGVyaWEuZm9yRWFjaCgoY3JpdGVyaWEpID0+IHtcclxuICAgICAgY3R4LmxpbmVXaWR0aCA9IDM7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNyaXRlcmlhLmJvcmRlckNvbG91cjtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHgucmVjdChjcml0ZXJpYS54LCBjcml0ZXJpYS55LCBjcml0ZXJpYS53aWR0aCwgY3JpdGVyaWEuaGVpZ2h0KTtcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/creature.js\nclass Creature {\r\n  constructor(genome, neuralNetwork, startingX, startingY, dimension, gameWidth, gameHeight, speed, drawInfo) {\r\n    this.fitness = -1;\r\n    this.genome = genome;\r\n    this.neuralNetwork = neuralNetwork;\r\n    this.gameWidth = gameWidth;\r\n    this.gameHeight = gameHeight;\r\n    this.speed = speed;\r\n    this.drawInfo = drawInfo;\r\n    this.dimensions = {\r\n      width: dimension,\r\n      height: dimension,\r\n    };\r\n\r\n    this.position = {\r\n      x: startingX,\r\n      y: startingY,\r\n    };\r\n\r\n    this.generateColour();\r\n  }\r\n\r\n  setFitness(fitness) {\r\n    if (this.fitness === -1) {\r\n      this.fitness = fitness;\r\n    }\r\n  }\r\n\r\n  scaleValue(value, xMin, xMax, yMin, yMax) {\r\n    var percent = (value - yMin) / (yMax - yMin);\r\n    return percent * (xMax - xMin) + xMin;\r\n  }\r\n\r\n  getRandomColour(scaledGenomeNumber) {\r\n    return `#${Math.floor(scaledGenomeNumber * 16777215).toString(16)}`;\r\n  }\r\n\r\n  generateColour() {\r\n    var genomeColour =\r\n      this.genome.chromosomes.reduce((lastValue, currentValue) => {\r\n        lastValue ^= currentValue;\r\n        return lastValue >>> 0;\r\n      }, this.genome.chromosomes[0]) >>> 0;\r\n\r\n    var scaledGenomeColour = this.scaleValue(genomeColour, 0, 1, 0, 4294967295); // Max value of unsigned 32 bit int... 4294967295\r\n    this.colour = this.getRandomColour(scaledGenomeColour);\r\n  }\r\n\r\n  drawerLable(ctx) {\r\n    ctx.fillText(`${this.genome.toString()}`, this.position.x - 10, this.position.y - 10);\r\n  }\r\n\r\n  drawer(ctx) {\r\n    ctx.fillStyle = this.colour;\r\n    ctx.beginPath();\r\n    ctx.ellipse(\r\n      this.position.x + this.dimensions.width / 2,\r\n      this.position.y + this.dimensions.height / 2,\r\n      this.dimensions.width / 2,\r\n      this.dimensions.height / 2,\r\n      0,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    if (this.drawInfo) {\r\n      this.drawerLable(ctx);\r\n    }\r\n  }\r\n\r\n  update(actionProbabilities) {\r\n    const currentPosition = {\r\n      ...this.position,\r\n    };\r\n\r\n    if (actionProbabilities.length > 0) {\r\n      var bestAction = actionProbabilities.filter((action) => Math.random() < action.getValue()).sort((a, b) => b - a);\r\n      //console.log(bestAction.getValue());\r\n\r\n      if (bestAction[0]) {\r\n        bestAction[0].applyAction(this);\r\n      }\r\n      if (\r\n        this.position.x < 0 ||\r\n        this.position.x >= this.gameWidth * this.dimensions.width ||\r\n        this.position.y < 0 ||\r\n        this.position.y >= this.gameHeight * this.dimensions.height\r\n      ) {\r\n        //console.log("Hit Edge");\r\n        this.position = currentPosition;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateAndRedrawer(ctx) {\r\n    var actionProbabilities = this.neuralNetwork.feedForward(this);\r\n    this.update(actionProbabilities);\r\n    this.drawer(ctx);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/game.js\nclass Game {\r\n  constructor(GAME_HEIGHT, GAME_WIDTH, DIVISION_SIZE, SHOW_GRAPH, successCriteria) {\r\n    this.height = GAME_HEIGHT;\r\n    this.width = GAME_WIDTH;\r\n    this.divisionSize = DIVISION_SIZE;\r\n    this.showGraph = SHOW_GRAPH;\r\n    this.successCriteriaVisualization = successCriteria;\r\n    this.gameCreatures = [];\r\n\r\n    this.canvas = document.createElement("canvas");\r\n    this.canvas.setAttribute("id", "canvas");\r\n    this.canvas.setAttribute("width", GAME_WIDTH * DIVISION_SIZE);\r\n    this.canvas.setAttribute("height", GAME_HEIGHT * DIVISION_SIZE);\r\n    this.canvas.setAttribute("style", "border: 1px solid black; box-sizing: border-box");\r\n    document.body.appendChild(this.canvas);\r\n    this.ctx = canvas.getContext("2d");\r\n  }\r\n\r\n  addCreature(creature) {\r\n    this.gameCreatures.push(creature);\r\n  }\r\n\r\n  getSurvivors(successCriteria) {\r\n    return this.gameCreatures\r\n      .filter((c) => {\r\n        return successCriteria.some((criteria) => {\r\n          const xBottom = criteria.x + criteria.width;\r\n          const yBottom = criteria.y + criteria.height;\r\n          return c.position.x >= criteria.x && c.position.y >= criteria.y && c.position.x <= xBottom && c.position.y <= yBottom;\r\n        });\r\n      })\r\n      .sort((a, b) => a.fitness - b.fitness);\r\n  }\r\n\r\n  creatureHasMadeItHome(creature, successCriteria) {\r\n    return successCriteria.some((criteria) => {\r\n      const xBottom = criteria.x + criteria.width;\r\n      const yBottom = criteria.y + criteria.height;\r\n      return (\r\n        creature.position.x >= criteria.x &&\r\n        creature.position.y >= criteria.y &&\r\n        creature.position.x <= xBottom &&\r\n        creature.position.y <= yBottom\r\n      );\r\n    });\r\n  }\r\n\r\n  drawGrid() {\r\n    this.ctx.lineWidth = 0.5;\r\n    // Do columns\r\n    for (let index = this.divisionSize; index < this.width * this.divisionSize; index += this.divisionSize) {\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(index, 0);\r\n      this.ctx.lineTo(index, this.height * this.divisionSize);\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    }\r\n\r\n    // Do Rows\r\n    for (let index = this.divisionSize; index < this.height * this.divisionSize; index += this.divisionSize) {\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(0, index);\r\n      this.ctx.lineTo(this.width * this.divisionSize, index);\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    }\r\n  }\r\n\r\n  update(currentStepCount) {\r\n    this.ctx.fillStyle = "white";\r\n    this.ctx.fillRect(0, 0, this.width * this.divisionSize, this.height * this.divisionSize);\r\n    this.gameCreatures.forEach((creature) => {\r\n      creature.updateAndRedrawer(this.ctx);\r\n      if (creature.fitness === -1 && this.creatureHasMadeItHome(creature, this.successCriteriaVisualization.successCriteria)) {\r\n        creature.setFitness(currentStepCount);\r\n      }\r\n    });\r\n\r\n    if (this.showGraph) {\r\n      this.drawGrid();\r\n    }\r\n\r\n    this.successCriteriaVisualization.drawer(this.ctx);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/bit-operations.js\nfunction checkBit(number, bitToCheck) {\r\n  var mask = (1 << bitToCheck) >>> 0;\r\n  var result = (number & mask) >>> 0;\r\n  return result !== 0;\r\n}\r\n\r\nfunction slice(number, start, end) {\r\n  var mask = Math.pow(2, end - start + 1) - 1;\r\n  mask = mask << start;\r\n  var result = number & mask;\r\n  return result >> start;\r\n}\r\n\r\nfunction flipBit(number, bitToFlip) {\r\n  if (checkBit(number, bitToFlip)) {\r\n    // bit is on\r\n    var mask = 1 << bitToFlip;\r\n    // invert mask then and\r\n    mask = ~mask;\r\n    return (number & mask) >>> 0;\r\n  }\r\n\r\n  // bit is off\r\n  var mask = 1 << bitToFlip;\r\n  return (number | mask) >>> 0;\r\n}\r\n\n// CONCATENATED MODULE: ./src/genome.js\n\r\n\r\nclass genome_Genome {\r\n  constructor(size, generateRandomValues = true) {\r\n    if (size % 2 !== 0) {\r\n      throw "Genome size must be an even number.";\r\n    }\r\n    this.size = size;\r\n    this.chromosomes = new Uint32Array(size);\r\n    if (generateRandomValues) {\r\n      window.crypto.getRandomValues(this.chromosomes);\r\n    }\r\n  }\r\n\r\n  static createNewGenomeFromParents(genomeOne, genomeTwo, mutationRate) {\r\n    var takeFromParentOneFirst = Math.random() > 0.5;\r\n    var size = genomeOne.size;\r\n    var newGenome = new genome_Genome(size, false);\r\n    for (let index = 0; index < size; index++) {\r\n      if (takeFromParentOneFirst) {\r\n        newGenome.chromosomes[index] = genomeOne.chromosomes[index];\r\n      } else {\r\n        newGenome.chromosomes[index] = genomeTwo.chromosomes[index];\r\n      }\r\n\r\n      var mutationShouldOccure = Math.random() < mutationRate;\r\n      if (mutationShouldOccure) {\r\n        var originalChromosome = newGenome.chromosomes[index];\r\n        var bitToFlip = Math.floor(Math.random() * 32) + 1;\r\n        var mutatedChromosome = flipBit(originalChromosome, bitToFlip);\r\n        console.log(\r\n          `Mutation occured on bit ${bitToFlip}, change from ${(originalChromosome >>> 0).toString(2)} to ${(\r\n            mutatedChromosome >>> 0\r\n          ).toString(2)}.`\r\n        );\r\n        newGenome.chromosomes[index] = mutatedChromosome;\r\n      }\r\n\r\n      takeFromParentOneFirst = !takeFromParentOneFirst;\r\n    }\r\n\r\n    return newGenome;\r\n  }\r\n\r\n  toString() {\r\n    return this.chromosomes.join(":");\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/neuron.js\nclass Neuron {\r\n  constructor(type, game) {\r\n    this.type = type;\r\n    this.game = game;\r\n    this.connections = [];\r\n    this.lastValue = 0;\r\n  }\r\n\r\n  scaleValue(value, xMin, xMax, yMin, yMax) {\r\n    var percent = (value - yMin) / (yMax - yMin);\r\n    return percent * (xMax - xMin) + xMin;\r\n  }\r\n\r\n  addConnection(connection) {\r\n    this.connections.push(connection);\r\n  }\r\n\r\n  updateLastValue(lastValue) {\r\n    this.lastValue = lastValue;\r\n  }\r\n\r\n  getValue(creature) {\r\n    return this.lastValue;\r\n  }\r\n\r\n  applyAction(creature) {\r\n    return;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.type}`;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/inputs/SensitivityToProximityToEast.js\n\r\n\r\nclass SensitivityToProximityToEast_SensitivityToProximityToEast extends Neuron {\r\n  constructor(game) {\r\n    super("SensitivityToProximityToEast", game);\r\n  }\r\n\r\n  getValue(creature) {\r\n    var scaledGameWidth = this.game.width * this.game.divisionSize;\r\n    var scaledInput = this.scaleValue(creature.position.x, 0, 1, 0, scaledGameWidth);\r\n    return scaledInput;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/inputs/SensitivityToProximityToWest.js\n\r\n\r\nclass SensitivityToProximityToWest_SensitivityToProximityToWest extends Neuron {\r\n  constructor(game) {\r\n    super("SensitivityToProximityToWest", game);\r\n  }\r\n\r\n  getValue(creature) {\r\n    var scaledGameWidth = this.game.width * this.game.divisionSize;\r\n    var invertedX = scaledGameWidth - creature.position.x;\r\n    var scaledInput = this.scaleValue(invertedX, 0, 1, 0, scaledGameWidth);\r\n    return scaledInput;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/inputs/SensitivityToProximityToSouth.js\n\r\n\r\nclass SensitivityToProximityToSouth_SensitivityToProximityToSouth extends Neuron {\r\n  constructor(game) {\r\n    super("SensitivityToProximityToSouth", game);\r\n  }\r\n\r\n  getValue(creature) {\r\n    var scaledGameHeight = this.game.height * this.game.divisionSize;\r\n    var scaledInput = this.scaleValue(creature.position.y, 0, 1, 0, scaledGameHeight);\r\n    return scaledInput;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/inputs/SensitivityToProximityToNorth.js\n\r\n\r\nclass SensitivityToProximityToNorth_SensitivityToProximityToNorth extends Neuron {\r\n  constructor(game) {\r\n    super("SensitivityToProximityToNorth", game);\r\n  }\r\n\r\n  /*\r\n    if creature.y = 0 return 1\r\n    if creature.y = 128 return 0\r\n  */\r\n  getValue(creature) {\r\n    var scaledGameHeight = this.game.height * this.game.divisionSize;\r\n    var invertedY = scaledGameHeight - creature.position.y;\r\n    var scaledInput = this.scaleValue(invertedY, 0, 1, 0, scaledGameHeight);\r\n    return scaledInput;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/connection.js\nclass Connection {\r\n  constructor(source, sink, weight) {\r\n    this.source = source;\r\n    this.sink = sink;\r\n    this.weight = weight;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.source}:${this.sink}:${this.weight}`;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoNorth.js\n\r\n\r\nclass GoNorth_GoNorth extends Neuron {\r\n  constructor() {\r\n    super("GoNorth");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y -= creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoNorthEast.js\n\r\n\r\nclass GoNorthEast_GoNorthEast extends Neuron {\r\n  constructor() {\r\n    super("GoNorthEast");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y -= creature.speed * creature.dimensions.width;\r\n    creature.position.x += creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoEast.js\n\r\n\r\nclass GoEast_GoEast extends Neuron {\r\n  constructor() {\r\n    super("GoEast");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.x += creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoSouthEast.js\n\r\n\r\nclass GoSouthEast_GoSouthEast extends Neuron {\r\n  constructor() {\r\n    super("GoSouthEast");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.x += creature.speed * creature.dimensions.width;\r\n    creature.position.y += creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoSouth.js\n\r\n\r\nclass GoSouth_GoSouth extends Neuron {\r\n  constructor() {\r\n    super("GoSouth");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y += creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoSouthWest.js\n\r\n\r\nclass GoSouthWest_GoSouthWest extends Neuron {\r\n  constructor() {\r\n    super("GoSouthWest");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y += creature.speed * creature.dimensions.width;\r\n    creature.position.x -= creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoWest.js\n\r\n\r\nclass GoWest_GoWest extends Neuron {\r\n  constructor() {\r\n    super("GoWest");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.x -= creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoNorthWest.js\n\r\n\r\nclass GoNorthWest_GoNorthWest extends Neuron {\r\n  constructor() {\r\n    super("GoNorthWest");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y -= creature.speed * creature.dimensions.width;\r\n    creature.position.x -= creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/DoNothing.js\n\r\n\r\nclass DoNothing_DoNothing extends Neuron {\r\n  constructor() {\r\n    super("DoNothing");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    return;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/neural-network.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass neural_network_NeuralNetwork {\r\n  constructor(numberOfHiddenNeurons, genome, sensitivityNeuronFactory) {\r\n    this.genome = genome;\r\n    this.hiddenNeurons = new Array(numberOfHiddenNeurons);\r\n\r\n    for (let index = 0; index < this.hiddenNeurons.length; index++) {\r\n      this.hiddenNeurons[index] = new Neuron(`Hidden Layer ${index}`);\r\n    }\r\n\r\n    this.inputNeurons = [\r\n      sensitivityNeuronFactory("SensitivityToProximityToEast"),\r\n      sensitivityNeuronFactory("SensitivityToProximityToNorth"),\r\n      sensitivityNeuronFactory("SensitivityToProximityToSouth"),\r\n      sensitivityNeuronFactory("SensitivityToProximityToWest"),\r\n    ];\r\n\r\n    this.outputNeurons = [\r\n      new DoNothing_DoNothing(),\r\n      new GoNorth_GoNorth(),\r\n      new GoNorthEast_GoNorthEast(),\r\n      new GoEast_GoEast(),\r\n      new GoSouthEast_GoSouthEast(),\r\n      new GoSouth_GoSouth(),\r\n      new GoSouthWest_GoSouthWest(),\r\n      new GoWest_GoWest(),\r\n      new GoNorthWest_GoNorthWest(),\r\n    ];\r\n\r\n    for (let index = 0; index < this.genome.size; index++) {\r\n      var chromosome = this.genome.chromosomes[index];\r\n      this.addConnection(chromosome);\r\n    }\r\n  }\r\n\r\n  scaleWeight(weight, xMin, xMax, yMin, yMax) {\r\n    var percent = (weight - yMin) / (yMax - yMin);\r\n    return percent * (xMax - xMin) + xMin;\r\n  }\r\n\r\n  // first bit is source type (i.e 0 = sensor neuron, or 1 hidden neuron)\r\n  // next 5 bits determine which instance of that source type we have\r\n  // next bit is the sink type (i.e an internal neuron or an action/output neuron)\r\n  // next 20 bits is the weight of the connection\r\n\r\n  //      31| 30-26 | 25| 24-20 |19-----------------0\r\n  //       1| 01110 | 0 | 11000 |10010111001011000101\r\n  //E.g.   0| 00011 | 0 | 01100 |11001100110011001100\r\n  //                             10000000000000000000\r\n  //                             11111111111111111111 = 0 to 1048575\r\n  addConnection(chromosome) {\r\n    var sourceIsAnInputNeuron = checkBit(chromosome, 31); // 0 based index on the bits, i.e. 0 is furthest right (least significant bit)\r\n    var getSourceInstance = slice(chromosome, 26, 30) % (sourceIsAnInputNeuron ? this.inputNeurons.length : this.hiddenNeurons.length);\r\n    var sinkIsAnOutputNeuron = checkBit(chromosome, 25);\r\n    var getOutputInstance = slice(chromosome, 20, 24) % (sinkIsAnOutputNeuron ? this.outputNeurons.length : this.hiddenNeurons.length);\r\n    var weight = this.scaleWeight(slice(chromosome, 0, 19), -4, 4, 0, 1048575);\r\n\r\n    var source;\r\n    var sink;\r\n\r\n    if (sourceIsAnInputNeuron) {\r\n      // get the sensor type\r\n      source = this.inputNeurons[getSourceInstance];\r\n    } else {\r\n      // this is a hidden layer neuron\r\n      source = this.hiddenNeurons[getSourceInstance];\r\n    }\r\n\r\n    if (sinkIsAnOutputNeuron) {\r\n      // get the action type\r\n      sink = this.outputNeurons[getOutputInstance];\r\n    } else {\r\n      // this is a hidden layer neuron\r\n      sink = this.hiddenNeurons[getOutputInstance];\r\n    }\r\n\r\n    sink.addConnection(new Connection(source, sink, weight));\r\n  }\r\n\r\n  feedForward(creature) {\r\n    // Only return output neurons with a positive "probability"\r\n    return this.outputNeurons.filter((n) => {\r\n      var outputForN = this.feedForwardPer(n, creature);\r\n      n.updateLastValue(outputForN);\r\n      return outputForN > 0;\r\n    });\r\n  }\r\n\r\n  feedForwardPer(neuron, creature) {\r\n    var depth = 0;\r\n\r\n    let getInput = (connection, seenNodes) => {\r\n      depth++;\r\n      if (depth > 15) {\r\n        debugger;\r\n      }\r\n      // this connection has a source and a weight, need to get the source input value * weight and return that\r\n      var sink = connection.sink;\r\n      var source = connection.source;\r\n      var weight = connection.weight;\r\n      seenNodes.set(sink, sink.getValue(creature));\r\n\r\n      if (seenNodes.has(source)) {\r\n        return seenNodes.get(source);\r\n      } else if (source.connections.length === 0) {\r\n        // we\'re at the top of the tree so return the value of the input * weight\r\n        var input = source.getValue(creature);\r\n        return input * weight;\r\n      } else {\r\n        // we still have more connections to get\r\n        var sumOfWeightedInputs = 0;\r\n        for (let index = 0; index < source.connections.length; index++) {\r\n          const connection = source.connections[index];\r\n          sumOfWeightedInputs += getInput(connection, seenNodes);\r\n        }\r\n\r\n        return Math.tanh(sumOfWeightedInputs);\r\n      }\r\n    };\r\n\r\n    var sumOfWeightedInputs = 0;\r\n    for (let index = 0; index < neuron.connections.length; index++) {\r\n      const seenNodes = new Map();\r\n      const connection = neuron.connections[index];\r\n      sumOfWeightedInputs += getInput(connection, seenNodes);\r\n    }\r\n    return Math.tanh(sumOfWeightedInputs);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/simulation.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return simulation_Simulation; });\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass simulation_Simulation {\r\n  constructor(\r\n    sizeOfPopulation,\r\n    numberOfGenerationsToRun,\r\n    movesPerGeneration,\r\n    framesPerSecond,\r\n    sizeOfGenome,\r\n    numberOfNeuronsInHiddenLayer,\r\n    mutationRate,\r\n    successCriteriaVisualization\r\n  ) {\r\n    this.sizeOfPopulation = sizeOfPopulation;\r\n    this.numberOfGenerationsToRun = numberOfGenerationsToRun;\r\n    this.movesPerGeneration = movesPerGeneration;\r\n    this.framesPerSecond = framesPerSecond;\r\n    this.sizeOfGenome = sizeOfGenome;\r\n    this.numberOfNeuronsInHiddenLayer = numberOfNeuronsInHiddenLayer;\r\n    this.mutationRate = mutationRate;\r\n    this.successCriteriaVisualization = successCriteriaVisualization;\r\n\r\n    this._sensitivityNeuronFactory = (game) => (type) => {\r\n      switch (type) {\r\n        case "SensitivityToProximityToEast":\r\n          return new SensitivityToProximityToEast_SensitivityToProximityToEast(game);\r\n        case "SensitivityToProximityToWest":\r\n          return new SensitivityToProximityToWest_SensitivityToProximityToWest(game);\r\n        case "SensitivityToProximityToSouth":\r\n          return new SensitivityToProximityToSouth_SensitivityToProximityToSouth(game);\r\n        case "SensitivityToProximityToNorth":\r\n          return new SensitivityToProximityToNorth_SensitivityToProximityToNorth(game);\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    this.currentStepCount = 0;\r\n    this.currentGenerationCount = 0;\r\n    this.generationCountLabel = document.createElement("h1");\r\n    document.body.appendChild(this.generationCountLabel);\r\n    this.stepCountLabel = document.createElement("h1");\r\n    document.body.appendChild(this.stepCountLabel);\r\n  }\r\n\r\n  _randomNumberBetween(min, max) {\r\n    return Math.floor(Math.random() * (max - min) + 1);\r\n  }\r\n\r\n  _roundToNearest(numberToRound, valueToNearest) {\r\n    return Math.ceil(numberToRound / valueToNearest) * valueToNearest;\r\n  }\r\n\r\n  _getPositionWithin(game) {\r\n    return this._roundToNearest(this._randomNumberBetween(0, game.width * game.divisionSize - game.divisionSize), game.divisionSize);\r\n  }\r\n\r\n  _initialiseGame() {\r\n    this.game = new Game(128, 128, 5, false, this.successCriteriaVisualization);\r\n  }\r\n\r\n  _generateInitialCohort() {\r\n    for (let index = 0; index < this.sizeOfPopulation; index++) {\r\n      // 0,0 to 635,635\r\n      const genome = new genome_Genome(this.sizeOfGenome);\r\n      const neuralNetwork = new neural_network_NeuralNetwork(this.numberOfNeuronsInHiddenLayer, genome, this._sensitivityNeuronFactory(this.game));\r\n      const creature = new Creature(\r\n        genome,\r\n        neuralNetwork,\r\n        this._getPositionWithin(this.game),\r\n        this._getPositionWithin(this.game),\r\n        this.game.divisionSize,\r\n        this.game.width,\r\n        this.game.height,\r\n        1,\r\n        false\r\n      );\r\n      this.game.addCreature(creature);\r\n    }\r\n  }\r\n\r\n  _generateNextCohort(survivors) {\r\n    this.game.gameCreatures = [];\r\n    for (let indexOne = 0, indexTwo = 2; indexTwo < survivors.length; indexOne++, indexTwo++) {\r\n      if (this.game.gameCreatures.length > this.sizeOfPopulation) {\r\n        console.log("Hit population limit");\r\n        break;\r\n      }\r\n      const parentOne = survivors[indexOne];\r\n      const parentTwo = survivors[indexOne + 1];\r\n      const parentOneGenome = parentOne.genome;\r\n      const parentTwoGenome = parentTwo.genome;\r\n      var childGenomeOne = genome_Genome.createNewGenomeFromParents(parentOneGenome, parentTwoGenome, this.mutationRate);\r\n      var childGenomeTwo = genome_Genome.createNewGenomeFromParents(parentTwoGenome, parentOneGenome, this.mutationRate);\r\n      const neuralNetworkOne = new neural_network_NeuralNetwork(\r\n        this.numberOfNeuronsInHiddenLayer,\r\n        childGenomeOne,\r\n        this._sensitivityNeuronFactory(this.game)\r\n      );\r\n      const neuralNetworkTwo = new neural_network_NeuralNetwork(\r\n        this.numberOfNeuronsInHiddenLayer,\r\n        childGenomeTwo,\r\n        this._sensitivityNeuronFactory(this.game)\r\n      );\r\n\r\n      const creatureOne = new Creature(\r\n        childGenomeOne,\r\n        neuralNetworkOne,\r\n        this._getPositionWithin(this.game),\r\n        this._getPositionWithin(this.game),\r\n        this.game.divisionSize,\r\n        this.game.width,\r\n        this.game.height,\r\n        1,\r\n        false\r\n      );\r\n\r\n      const creatureTwo = new Creature(\r\n        childGenomeTwo,\r\n        neuralNetworkTwo,\r\n        this._getPositionWithin(this.game),\r\n        this._getPositionWithin(this.game),\r\n        this.game.divisionSize,\r\n        this.game.width,\r\n        this.game.height,\r\n        1,\r\n        false\r\n      );\r\n\r\n      this.game.addCreature(creatureOne);\r\n      this.game.addCreature(creatureTwo);\r\n    }\r\n  }\r\n\r\n  _animate() {\r\n    this.stepCountLabel.innerText = `Generation Step Count: ${this.currentStepCount++}`;\r\n    this.game.update(this.currentStepCount);\r\n    if (this.currentStepCount <= this.movesPerGeneration) {\r\n      setTimeout(() => requestAnimationFrame(this._animate.bind(this)), 1000 / this.framesPerSecond);\r\n    } else {\r\n      // This generation has finished, time to get the survivors to reproduce\r\n      // Then set the board back with the new generation\r\n      this.generationCountLabel.innerText = `Gen ${++this.currentGenerationCount}`;\r\n      const survivors = this.game.getSurvivors(this.successCriteriaVisualization.successCriteria);\r\n      console.log(`Number of survivors ${survivors.length}.`);\r\n      this._generateNextCohort(survivors);\r\n      this.currentStepCount = 0;\r\n      this._animate();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.generationCountLabel.innerText = `Gen ${this.currentGenerationCount}`;\r\n    this._initialiseGame();\r\n    this._generateInitialCohort();\r\n    this._animate();\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY3JlYXR1cmUuanM/MDE0YyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS5qcz83ZGUwIiwid2VicGFjazovLy8uL3NyYy9iaXQtb3BlcmF0aW9ucy5qcz9iMGVmIiwid2VicGFjazovLy8uL3NyYy9nZW5vbWUuanM/ZGZjNSIsIndlYnBhY2s6Ly8vLi9zcmMvbm4vbmV1cm9uLmpzP2VlNDciLCJ3ZWJwYWNrOi8vLy4vc3JjL25uL2lucHV0cy9TZW5zaXRpdml0eVRvUHJveGltaXR5VG9FYXN0LmpzPzI1NDAiLCJ3ZWJwYWNrOi8vLy4vc3JjL25uL2lucHV0cy9TZW5zaXRpdml0eVRvUHJveGltaXR5VG9XZXN0LmpzP2I2NWQiLCJ3ZWJwYWNrOi8vLy4vc3JjL25uL2lucHV0cy9TZW5zaXRpdml0eVRvUHJveGltaXR5VG9Tb3V0aC5qcz81NjdjIiwid2VicGFjazovLy8uL3NyYy9ubi9pbnB1dHMvU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvTm9ydGguanM/ZTJjZiIsIndlYnBhY2s6Ly8vLi9zcmMvbm4vY29ubmVjdGlvbi5qcz9iMjc0Iiwid2VicGFjazovLy8uL3NyYy9ubi9vdXRwdXRzL0dvTm9ydGguanM/MmZhZCIsIndlYnBhY2s6Ly8vLi9zcmMvbm4vb3V0cHV0cy9Hb05vcnRoRWFzdC5qcz8zZDBmIiwid2VicGFjazovLy8uL3NyYy9ubi9vdXRwdXRzL0dvRWFzdC5qcz80NWQxIiwid2VicGFjazovLy8uL3NyYy9ubi9vdXRwdXRzL0dvU291dGhFYXN0LmpzP2VhYjkiLCJ3ZWJwYWNrOi8vLy4vc3JjL25uL291dHB1dHMvR29Tb3V0aC5qcz85OTRkIiwid2VicGFjazovLy8uL3NyYy9ubi9vdXRwdXRzL0dvU291dGhXZXN0LmpzP2JlYTMiLCJ3ZWJwYWNrOi8vLy4vc3JjL25uL291dHB1dHMvR29XZXN0LmpzPzY2MTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL25uL291dHB1dHMvR29Ob3J0aFdlc3QuanM/ODY4MiIsIndlYnBhY2s6Ly8vLi9zcmMvbm4vb3V0cHV0cy9Eb05vdGhpbmcuanM/ZjUxZSIsIndlYnBhY2s6Ly8vLi9zcmMvbm4vbmV1cmFsLW5ldHdvcmsuanM/MDU0OCIsIndlYnBhY2s6Ly8vLi9zcmMvc2ltdWxhdGlvbi5qcz9jOTNkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsdURBQXVEO0FBQ3RFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQLGdGQUFnRjtBQUNoRjtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLHVCQUF1QjtBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwR2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRDtBQUMvRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFD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OztBQUVBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQThELHdCQUF3QjtBQUN0RjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLG1EQUFtRCw4QkFBOEI7QUFDakY7QUFDQSx5Q0FBeUMsaUJBQWlCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpREFBaUQsNEJBQTRCO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIENyZWF0dXJlIHtcclxuICBjb25zdHJ1Y3RvcihnZW5vbWUsIG5ldXJhbE5ldHdvcmssIHN0YXJ0aW5nWCwgc3RhcnRpbmdZLCBkaW1lbnNpb24sIGdhbWVXaWR0aCwgZ2FtZUhlaWdodCwgc3BlZWQsIGRyYXdJbmZvKSB7XHJcbiAgICB0aGlzLmZpdG5lc3MgPSAtMTtcclxuICAgIHRoaXMuZ2Vub21lID0gZ2Vub21lO1xyXG4gICAgdGhpcy5uZXVyYWxOZXR3b3JrID0gbmV1cmFsTmV0d29yaztcclxuICAgIHRoaXMuZ2FtZVdpZHRoID0gZ2FtZVdpZHRoO1xyXG4gICAgdGhpcy5nYW1lSGVpZ2h0ID0gZ2FtZUhlaWdodDtcclxuICAgIHRoaXMuc3BlZWQgPSBzcGVlZDtcclxuICAgIHRoaXMuZHJhd0luZm8gPSBkcmF3SW5mbztcclxuICAgIHRoaXMuZGltZW5zaW9ucyA9IHtcclxuICAgICAgd2lkdGg6IGRpbWVuc2lvbixcclxuICAgICAgaGVpZ2h0OiBkaW1lbnNpb24sXHJcbiAgICB9O1xyXG5cclxuICAgIHRoaXMucG9zaXRpb24gPSB7XHJcbiAgICAgIHg6IHN0YXJ0aW5nWCxcclxuICAgICAgeTogc3RhcnRpbmdZLFxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmdlbmVyYXRlQ29sb3VyKCk7XHJcbiAgfVxyXG5cclxuICBzZXRGaXRuZXNzKGZpdG5lc3MpIHtcclxuICAgIGlmICh0aGlzLmZpdG5lc3MgPT09IC0xKSB7XHJcbiAgICAgIHRoaXMuZml0bmVzcyA9IGZpdG5lc3M7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzY2FsZVZhbHVlKHZhbHVlLCB4TWluLCB4TWF4LCB5TWluLCB5TWF4KSB7XHJcbiAgICB2YXIgcGVyY2VudCA9ICh2YWx1ZSAtIHlNaW4pIC8gKHlNYXggLSB5TWluKTtcclxuICAgIHJldHVybiBwZXJjZW50ICogKHhNYXggLSB4TWluKSArIHhNaW47XHJcbiAgfVxyXG5cclxuICBnZXRSYW5kb21Db2xvdXIoc2NhbGVkR2Vub21lTnVtYmVyKSB7XHJcbiAgICByZXR1cm4gYCMke01hdGguZmxvb3Ioc2NhbGVkR2Vub21lTnVtYmVyICogMTY3NzcyMTUpLnRvU3RyaW5nKDE2KX1gO1xyXG4gIH1cclxuXHJcbiAgZ2VuZXJhdGVDb2xvdXIoKSB7XHJcbiAgICB2YXIgZ2Vub21lQ29sb3VyID1cclxuICAgICAgdGhpcy5nZW5vbWUuY2hyb21vc29tZXMucmVkdWNlKChsYXN0VmFsdWUsIGN1cnJlbnRWYWx1ZSkgPT4ge1xyXG4gICAgICAgIGxhc3RWYWx1ZSBePSBjdXJyZW50VmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZSA+Pj4gMDtcclxuICAgICAgfSwgdGhpcy5nZW5vbWUuY2hyb21vc29tZXNbMF0pID4+PiAwO1xyXG5cclxuICAgIHZhciBzY2FsZWRHZW5vbWVDb2xvdXIgPSB0aGlzLnNjYWxlVmFsdWUoZ2Vub21lQ29sb3VyLCAwLCAxLCAwLCA0Mjk0OTY3Mjk1KTsgLy8gTWF4IHZhbHVlIG9mIHVuc2lnbmVkIDMyIGJpdCBpbnQuLi4gNDI5NDk2NzI5NVxyXG4gICAgdGhpcy5jb2xvdXIgPSB0aGlzLmdldFJhbmRvbUNvbG91cihzY2FsZWRHZW5vbWVDb2xvdXIpO1xyXG4gIH1cclxuXHJcbiAgZHJhd2VyTGFibGUoY3R4KSB7XHJcbiAgICBjdHguZmlsbFRleHQoYCR7dGhpcy5nZW5vbWUudG9TdHJpbmcoKX1gLCB0aGlzLnBvc2l0aW9uLnggLSAxMCwgdGhpcy5wb3NpdGlvbi55IC0gMTApO1xyXG4gIH1cclxuXHJcbiAgZHJhd2VyKGN0eCkge1xyXG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY29sb3VyO1xyXG4gICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgY3R4LmVsbGlwc2UoXHJcbiAgICAgIHRoaXMucG9zaXRpb24ueCArIHRoaXMuZGltZW5zaW9ucy53aWR0aCAvIDIsXHJcbiAgICAgIHRoaXMucG9zaXRpb24ueSArIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLyAyLFxyXG4gICAgICB0aGlzLmRpbWVuc2lvbnMud2lkdGggLyAyLFxyXG4gICAgICB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC8gMixcclxuICAgICAgMCxcclxuICAgICAgMCxcclxuICAgICAgMiAqIE1hdGguUElcclxuICAgICk7XHJcbiAgICBjdHguZmlsbCgpO1xyXG4gICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgaWYgKHRoaXMuZHJhd0luZm8pIHtcclxuICAgICAgdGhpcy5kcmF3ZXJMYWJsZShjdHgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGFjdGlvblByb2JhYmlsaXRpZXMpIHtcclxuICAgIGNvbnN0IGN1cnJlbnRQb3NpdGlvbiA9IHtcclxuICAgICAgLi4udGhpcy5wb3NpdGlvbixcclxuICAgIH07XHJcblxyXG4gICAgaWYgKGFjdGlvblByb2JhYmlsaXRpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICB2YXIgYmVzdEFjdGlvbiA9IGFjdGlvblByb2JhYmlsaXRpZXMuZmlsdGVyKChhY3Rpb24pID0+IE1hdGgucmFuZG9tKCkgPCBhY3Rpb24uZ2V0VmFsdWUoKSkuc29ydCgoYSwgYikgPT4gYiAtIGEpO1xyXG4gICAgICAvL2NvbnNvbGUubG9nKGJlc3RBY3Rpb24uZ2V0VmFsdWUoKSk7XHJcblxyXG4gICAgICBpZiAoYmVzdEFjdGlvblswXSkge1xyXG4gICAgICAgIGJlc3RBY3Rpb25bMF0uYXBwbHlBY3Rpb24odGhpcyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMucG9zaXRpb24ueCA8IDAgfHxcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnggPj0gdGhpcy5nYW1lV2lkdGggKiB0aGlzLmRpbWVuc2lvbnMud2lkdGggfHxcclxuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPCAwIHx8XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbi55ID49IHRoaXMuZ2FtZUhlaWdodCAqIHRoaXMuZGltZW5zaW9ucy5oZWlnaHRcclxuICAgICAgKSB7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZyhcIkhpdCBFZGdlXCIpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBjdXJyZW50UG9zaXRpb247XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZUFuZFJlZHJhd2VyKGN0eCkge1xyXG4gICAgdmFyIGFjdGlvblByb2JhYmlsaXRpZXMgPSB0aGlzLm5ldXJhbE5ldHdvcmsuZmVlZEZvcndhcmQodGhpcyk7XHJcbiAgICB0aGlzLnVwZGF0ZShhY3Rpb25Qcm9iYWJpbGl0aWVzKTtcclxuICAgIHRoaXMuZHJhd2VyKGN0eCk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhbWUge1xyXG4gIGNvbnN0cnVjdG9yKEdBTUVfSEVJR0hULCBHQU1FX1dJRFRILCBESVZJU0lPTl9TSVpFLCBTSE9XX0dSQVBILCBzdWNjZXNzQ3JpdGVyaWEpIHtcclxuICAgIHRoaXMuaGVpZ2h0ID0gR0FNRV9IRUlHSFQ7XHJcbiAgICB0aGlzLndpZHRoID0gR0FNRV9XSURUSDtcclxuICAgIHRoaXMuZGl2aXNpb25TaXplID0gRElWSVNJT05fU0laRTtcclxuICAgIHRoaXMuc2hvd0dyYXBoID0gU0hPV19HUkFQSDtcclxuICAgIHRoaXMuc3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbiA9IHN1Y2Nlc3NDcml0ZXJpYTtcclxuICAgIHRoaXMuZ2FtZUNyZWF0dXJlcyA9IFtdO1xyXG5cclxuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuICAgIHRoaXMuY2FudmFzLnNldEF0dHJpYnV0ZShcImlkXCIsIFwiY2FudmFzXCIpO1xyXG4gICAgdGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgR0FNRV9XSURUSCAqIERJVklTSU9OX1NJWkUpO1xyXG4gICAgdGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIEdBTUVfSEVJR0hUICogRElWSVNJT05fU0laRSk7XHJcbiAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBcImJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOyBib3gtc2l6aW5nOiBib3JkZXItYm94XCIpO1xyXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmNhbnZhcyk7XHJcbiAgICB0aGlzLmN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgfVxyXG5cclxuICBhZGRDcmVhdHVyZShjcmVhdHVyZSkge1xyXG4gICAgdGhpcy5nYW1lQ3JlYXR1cmVzLnB1c2goY3JlYXR1cmUpO1xyXG4gIH1cclxuXHJcbiAgZ2V0U3Vydml2b3JzKHN1Y2Nlc3NDcml0ZXJpYSkge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2FtZUNyZWF0dXJlc1xyXG4gICAgICAuZmlsdGVyKChjKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHN1Y2Nlc3NDcml0ZXJpYS5zb21lKChjcml0ZXJpYSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgeEJvdHRvbSA9IGNyaXRlcmlhLnggKyBjcml0ZXJpYS53aWR0aDtcclxuICAgICAgICAgIGNvbnN0IHlCb3R0b20gPSBjcml0ZXJpYS55ICsgY3JpdGVyaWEuaGVpZ2h0O1xyXG4gICAgICAgICAgcmV0dXJuIGMucG9zaXRpb24ueCA+PSBjcml0ZXJpYS54ICYmIGMucG9zaXRpb24ueSA+PSBjcml0ZXJpYS55ICYmIGMucG9zaXRpb24ueCA8PSB4Qm90dG9tICYmIGMucG9zaXRpb24ueSA8PSB5Qm90dG9tO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KVxyXG4gICAgICAuc29ydCgoYSwgYikgPT4gYS5maXRuZXNzIC0gYi5maXRuZXNzKTtcclxuICB9XHJcblxyXG4gIGNyZWF0dXJlSGFzTWFkZUl0SG9tZShjcmVhdHVyZSwgc3VjY2Vzc0NyaXRlcmlhKSB7XHJcbiAgICByZXR1cm4gc3VjY2Vzc0NyaXRlcmlhLnNvbWUoKGNyaXRlcmlhKSA9PiB7XHJcbiAgICAgIGNvbnN0IHhCb3R0b20gPSBjcml0ZXJpYS54ICsgY3JpdGVyaWEud2lkdGg7XHJcbiAgICAgIGNvbnN0IHlCb3R0b20gPSBjcml0ZXJpYS55ICsgY3JpdGVyaWEuaGVpZ2h0O1xyXG4gICAgICByZXR1cm4gKFxyXG4gICAgICAgIGNyZWF0dXJlLnBvc2l0aW9uLnggPj0gY3JpdGVyaWEueCAmJlxyXG4gICAgICAgIGNyZWF0dXJlLnBvc2l0aW9uLnkgPj0gY3JpdGVyaWEueSAmJlxyXG4gICAgICAgIGNyZWF0dXJlLnBvc2l0aW9uLnggPD0geEJvdHRvbSAmJlxyXG4gICAgICAgIGNyZWF0dXJlLnBvc2l0aW9uLnkgPD0geUJvdHRvbVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkcmF3R3JpZCgpIHtcclxuICAgIHRoaXMuY3R4LmxpbmVXaWR0aCA9IDAuNTtcclxuICAgIC8vIERvIGNvbHVtbnNcclxuICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5kaXZpc2lvblNpemU7IGluZGV4IDwgdGhpcy53aWR0aCAqIHRoaXMuZGl2aXNpb25TaXplOyBpbmRleCArPSB0aGlzLmRpdmlzaW9uU2l6ZSkge1xyXG4gICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgdGhpcy5jdHgubW92ZVRvKGluZGV4LCAwKTtcclxuICAgICAgdGhpcy5jdHgubGluZVRvKGluZGV4LCB0aGlzLmhlaWdodCAqIHRoaXMuZGl2aXNpb25TaXplKTtcclxuICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XHJcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERvIFJvd3NcclxuICAgIGZvciAobGV0IGluZGV4ID0gdGhpcy5kaXZpc2lvblNpemU7IGluZGV4IDwgdGhpcy5oZWlnaHQgKiB0aGlzLmRpdmlzaW9uU2l6ZTsgaW5kZXggKz0gdGhpcy5kaXZpc2lvblNpemUpIHtcclxuICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIHRoaXMuY3R4Lm1vdmVUbygwLCBpbmRleCk7XHJcbiAgICAgIHRoaXMuY3R4LmxpbmVUbyh0aGlzLndpZHRoICogdGhpcy5kaXZpc2lvblNpemUsIGluZGV4KTtcclxuICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XHJcbiAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGN1cnJlbnRTdGVwQ291bnQpIHtcclxuICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMud2lkdGggKiB0aGlzLmRpdmlzaW9uU2l6ZSwgdGhpcy5oZWlnaHQgKiB0aGlzLmRpdmlzaW9uU2l6ZSk7XHJcbiAgICB0aGlzLmdhbWVDcmVhdHVyZXMuZm9yRWFjaCgoY3JlYXR1cmUpID0+IHtcclxuICAgICAgY3JlYXR1cmUudXBkYXRlQW5kUmVkcmF3ZXIodGhpcy5jdHgpO1xyXG4gICAgICBpZiAoY3JlYXR1cmUuZml0bmVzcyA9PT0gLTEgJiYgdGhpcy5jcmVhdHVyZUhhc01hZGVJdEhvbWUoY3JlYXR1cmUsIHRoaXMuc3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbi5zdWNjZXNzQ3JpdGVyaWEpKSB7XHJcbiAgICAgICAgY3JlYXR1cmUuc2V0Rml0bmVzcyhjdXJyZW50U3RlcENvdW50KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHRoaXMuc2hvd0dyYXBoKSB7XHJcbiAgICAgIHRoaXMuZHJhd0dyaWQoKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN1Y2Nlc3NDcml0ZXJpYVZpc3VhbGl6YXRpb24uZHJhd2VyKHRoaXMuY3R4KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQml0KG51bWJlciwgYml0VG9DaGVjaykge1xyXG4gIHZhciBtYXNrID0gKDEgPDwgYml0VG9DaGVjaykgPj4+IDA7XHJcbiAgdmFyIHJlc3VsdCA9IChudW1iZXIgJiBtYXNrKSA+Pj4gMDtcclxuICByZXR1cm4gcmVzdWx0ICE9PSAwO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2xpY2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XHJcbiAgdmFyIG1hc2sgPSBNYXRoLnBvdygyLCBlbmQgLSBzdGFydCArIDEpIC0gMTtcclxuICBtYXNrID0gbWFzayA8PCBzdGFydDtcclxuICB2YXIgcmVzdWx0ID0gbnVtYmVyICYgbWFzaztcclxuICByZXR1cm4gcmVzdWx0ID4+IHN0YXJ0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmxpcEJpdChudW1iZXIsIGJpdFRvRmxpcCkge1xyXG4gIGlmIChjaGVja0JpdChudW1iZXIsIGJpdFRvRmxpcCkpIHtcclxuICAgIC8vIGJpdCBpcyBvblxyXG4gICAgdmFyIG1hc2sgPSAxIDw8IGJpdFRvRmxpcDtcclxuICAgIC8vIGludmVydCBtYXNrIHRoZW4gYW5kXHJcbiAgICBtYXNrID0gfm1hc2s7XHJcbiAgICByZXR1cm4gKG51bWJlciAmIG1hc2spID4+PiAwO1xyXG4gIH1cclxuXHJcbiAgLy8gYml0IGlzIG9mZlxyXG4gIHZhciBtYXNrID0gMSA8PCBiaXRUb0ZsaXA7XHJcbiAgcmV0dXJuIChudW1iZXIgfCBtYXNrKSA+Pj4gMDtcclxufVxyXG4iLCJpbXBvcnQgeyBmbGlwQml0IH0gZnJvbSBcIi4vYml0LW9wZXJhdGlvbnNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdlbm9tZSB7XHJcbiAgY29uc3RydWN0b3Ioc2l6ZSwgZ2VuZXJhdGVSYW5kb21WYWx1ZXMgPSB0cnVlKSB7XHJcbiAgICBpZiAoc2l6ZSAlIDIgIT09IDApIHtcclxuICAgICAgdGhyb3cgXCJHZW5vbWUgc2l6ZSBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyLlwiO1xyXG4gICAgfVxyXG4gICAgdGhpcy5zaXplID0gc2l6ZTtcclxuICAgIHRoaXMuY2hyb21vc29tZXMgPSBuZXcgVWludDMyQXJyYXkoc2l6ZSk7XHJcbiAgICBpZiAoZ2VuZXJhdGVSYW5kb21WYWx1ZXMpIHtcclxuICAgICAgd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXModGhpcy5jaHJvbW9zb21lcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY3JlYXRlTmV3R2Vub21lRnJvbVBhcmVudHMoZ2Vub21lT25lLCBnZW5vbWVUd28sIG11dGF0aW9uUmF0ZSkge1xyXG4gICAgdmFyIHRha2VGcm9tUGFyZW50T25lRmlyc3QgPSBNYXRoLnJhbmRvbSgpID4gMC41O1xyXG4gICAgdmFyIHNpemUgPSBnZW5vbWVPbmUuc2l6ZTtcclxuICAgIHZhciBuZXdHZW5vbWUgPSBuZXcgR2Vub21lKHNpemUsIGZhbHNlKTtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzaXplOyBpbmRleCsrKSB7XHJcbiAgICAgIGlmICh0YWtlRnJvbVBhcmVudE9uZUZpcnN0KSB7XHJcbiAgICAgICAgbmV3R2Vub21lLmNocm9tb3NvbWVzW2luZGV4XSA9IGdlbm9tZU9uZS5jaHJvbW9zb21lc1tpbmRleF07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbmV3R2Vub21lLmNocm9tb3NvbWVzW2luZGV4XSA9IGdlbm9tZVR3by5jaHJvbW9zb21lc1tpbmRleF07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBtdXRhdGlvblNob3VsZE9jY3VyZSA9IE1hdGgucmFuZG9tKCkgPCBtdXRhdGlvblJhdGU7XHJcbiAgICAgIGlmIChtdXRhdGlvblNob3VsZE9jY3VyZSkge1xyXG4gICAgICAgIHZhciBvcmlnaW5hbENocm9tb3NvbWUgPSBuZXdHZW5vbWUuY2hyb21vc29tZXNbaW5kZXhdO1xyXG4gICAgICAgIHZhciBiaXRUb0ZsaXAgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAzMikgKyAxO1xyXG4gICAgICAgIHZhciBtdXRhdGVkQ2hyb21vc29tZSA9IGZsaXBCaXQob3JpZ2luYWxDaHJvbW9zb21lLCBiaXRUb0ZsaXApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFxyXG4gICAgICAgICAgYE11dGF0aW9uIG9jY3VyZWQgb24gYml0ICR7Yml0VG9GbGlwfSwgY2hhbmdlIGZyb20gJHsob3JpZ2luYWxDaHJvbW9zb21lID4+PiAwKS50b1N0cmluZygyKX0gdG8gJHsoXHJcbiAgICAgICAgICAgIG11dGF0ZWRDaHJvbW9zb21lID4+PiAwXHJcbiAgICAgICAgICApLnRvU3RyaW5nKDIpfS5gXHJcbiAgICAgICAgKTtcclxuICAgICAgICBuZXdHZW5vbWUuY2hyb21vc29tZXNbaW5kZXhdID0gbXV0YXRlZENocm9tb3NvbWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRha2VGcm9tUGFyZW50T25lRmlyc3QgPSAhdGFrZUZyb21QYXJlbnRPbmVGaXJzdDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3R2Vub21lO1xyXG4gIH1cclxuXHJcbiAgdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5jaHJvbW9zb21lcy5qb2luKFwiOlwiKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV1cm9uIHtcclxuICBjb25zdHJ1Y3Rvcih0eXBlLCBnYW1lKSB7XHJcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgdGhpcy5nYW1lID0gZ2FtZTtcclxuICAgIHRoaXMuY29ubmVjdGlvbnMgPSBbXTtcclxuICAgIHRoaXMubGFzdFZhbHVlID0gMDtcclxuICB9XHJcblxyXG4gIHNjYWxlVmFsdWUodmFsdWUsIHhNaW4sIHhNYXgsIHlNaW4sIHlNYXgpIHtcclxuICAgIHZhciBwZXJjZW50ID0gKHZhbHVlIC0geU1pbikgLyAoeU1heCAtIHlNaW4pO1xyXG4gICAgcmV0dXJuIHBlcmNlbnQgKiAoeE1heCAtIHhNaW4pICsgeE1pbjtcclxuICB9XHJcblxyXG4gIGFkZENvbm5lY3Rpb24oY29ubmVjdGlvbikge1xyXG4gICAgdGhpcy5jb25uZWN0aW9ucy5wdXNoKGNvbm5lY3Rpb24pO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlTGFzdFZhbHVlKGxhc3RWYWx1ZSkge1xyXG4gICAgdGhpcy5sYXN0VmFsdWUgPSBsYXN0VmFsdWU7XHJcbiAgfVxyXG5cclxuICBnZXRWYWx1ZShjcmVhdHVyZSkge1xyXG4gICAgcmV0dXJuIHRoaXMubGFzdFZhbHVlO1xyXG4gIH1cclxuXHJcbiAgYXBwbHlBY3Rpb24oY3JlYXR1cmUpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIGAke3RoaXMudHlwZX1gO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTmV1cm9uIGZyb20gXCIuLi9uZXVyb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb0Vhc3QgZXh0ZW5kcyBOZXVyb24ge1xyXG4gIGNvbnN0cnVjdG9yKGdhbWUpIHtcclxuICAgIHN1cGVyKFwiU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvRWFzdFwiLCBnYW1lKTtcclxuICB9XHJcblxyXG4gIGdldFZhbHVlKGNyZWF0dXJlKSB7XHJcbiAgICB2YXIgc2NhbGVkR2FtZVdpZHRoID0gdGhpcy5nYW1lLndpZHRoICogdGhpcy5nYW1lLmRpdmlzaW9uU2l6ZTtcclxuICAgIHZhciBzY2FsZWRJbnB1dCA9IHRoaXMuc2NhbGVWYWx1ZShjcmVhdHVyZS5wb3NpdGlvbi54LCAwLCAxLCAwLCBzY2FsZWRHYW1lV2lkdGgpO1xyXG4gICAgcmV0dXJuIHNjYWxlZElucHV0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTmV1cm9uIGZyb20gXCIuLi9uZXVyb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb1dlc3QgZXh0ZW5kcyBOZXVyb24ge1xyXG4gIGNvbnN0cnVjdG9yKGdhbWUpIHtcclxuICAgIHN1cGVyKFwiU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvV2VzdFwiLCBnYW1lKTtcclxuICB9XHJcblxyXG4gIGdldFZhbHVlKGNyZWF0dXJlKSB7XHJcbiAgICB2YXIgc2NhbGVkR2FtZVdpZHRoID0gdGhpcy5nYW1lLndpZHRoICogdGhpcy5nYW1lLmRpdmlzaW9uU2l6ZTtcclxuICAgIHZhciBpbnZlcnRlZFggPSBzY2FsZWRHYW1lV2lkdGggLSBjcmVhdHVyZS5wb3NpdGlvbi54O1xyXG4gICAgdmFyIHNjYWxlZElucHV0ID0gdGhpcy5zY2FsZVZhbHVlKGludmVydGVkWCwgMCwgMSwgMCwgc2NhbGVkR2FtZVdpZHRoKTtcclxuICAgIHJldHVybiBzY2FsZWRJbnB1dDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IE5ldXJvbiBmcm9tIFwiLi4vbmV1cm9uXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5zaXRpdml0eVRvUHJveGltaXR5VG9Tb3V0aCBleHRlbmRzIE5ldXJvbiB7XHJcbiAgY29uc3RydWN0b3IoZ2FtZSkge1xyXG4gICAgc3VwZXIoXCJTZW5zaXRpdml0eVRvUHJveGltaXR5VG9Tb3V0aFwiLCBnYW1lKTtcclxuICB9XHJcblxyXG4gIGdldFZhbHVlKGNyZWF0dXJlKSB7XHJcbiAgICB2YXIgc2NhbGVkR2FtZUhlaWdodCA9IHRoaXMuZ2FtZS5oZWlnaHQgKiB0aGlzLmdhbWUuZGl2aXNpb25TaXplO1xyXG4gICAgdmFyIHNjYWxlZElucHV0ID0gdGhpcy5zY2FsZVZhbHVlKGNyZWF0dXJlLnBvc2l0aW9uLnksIDAsIDEsIDAsIHNjYWxlZEdhbWVIZWlnaHQpO1xyXG4gICAgcmV0dXJuIHNjYWxlZElucHV0O1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTmV1cm9uIGZyb20gXCIuLi9uZXVyb25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb05vcnRoIGV4dGVuZHMgTmV1cm9uIHtcclxuICBjb25zdHJ1Y3RvcihnYW1lKSB7XHJcbiAgICBzdXBlcihcIlNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb05vcnRoXCIsIGdhbWUpO1xyXG4gIH1cclxuXHJcbiAgLypcclxuICAgIGlmIGNyZWF0dXJlLnkgPSAwIHJldHVybiAxXHJcbiAgICBpZiBjcmVhdHVyZS55ID0gMTI4IHJldHVybiAwXHJcbiAgKi9cclxuICBnZXRWYWx1ZShjcmVhdHVyZSkge1xyXG4gICAgdmFyIHNjYWxlZEdhbWVIZWlnaHQgPSB0aGlzLmdhbWUuaGVpZ2h0ICogdGhpcy5nYW1lLmRpdmlzaW9uU2l6ZTtcclxuICAgIHZhciBpbnZlcnRlZFkgPSBzY2FsZWRHYW1lSGVpZ2h0IC0gY3JlYXR1cmUucG9zaXRpb24ueTtcclxuICAgIHZhciBzY2FsZWRJbnB1dCA9IHRoaXMuc2NhbGVWYWx1ZShpbnZlcnRlZFksIDAsIDEsIDAsIHNjYWxlZEdhbWVIZWlnaHQpO1xyXG4gICAgcmV0dXJuIHNjYWxlZElucHV0O1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDb25uZWN0aW9uIHtcclxuICBjb25zdHJ1Y3Rvcihzb3VyY2UsIHNpbmssIHdlaWdodCkge1xyXG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICB0aGlzLnNpbmsgPSBzaW5rO1xyXG4gICAgdGhpcy53ZWlnaHQgPSB3ZWlnaHQ7XHJcbiAgfVxyXG5cclxuICB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiBgJHt0aGlzLnNvdXJjZX06JHt0aGlzLnNpbmt9OiR7dGhpcy53ZWlnaHR9YDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IE5ldXJvbiBmcm9tIFwiLi4vbmV1cm9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR29Ob3J0aCBleHRlbmRzIE5ldXJvbiB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcIkdvTm9ydGhcIik7XHJcbiAgfVxyXG5cclxuICBhcHBseUFjdGlvbihjcmVhdHVyZSkge1xyXG4gICAgY3JlYXR1cmUucG9zaXRpb24ueSAtPSBjcmVhdHVyZS5zcGVlZCAqIGNyZWF0dXJlLmRpbWVuc2lvbnMud2lkdGg7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBOZXVyb24gZnJvbSBcIi4uL25ldXJvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdvTm9ydGhFYXN0IGV4dGVuZHMgTmV1cm9uIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFwiR29Ob3J0aEVhc3RcIik7XHJcbiAgfVxyXG5cclxuICBhcHBseUFjdGlvbihjcmVhdHVyZSkge1xyXG4gICAgY3JlYXR1cmUucG9zaXRpb24ueSAtPSBjcmVhdHVyZS5zcGVlZCAqIGNyZWF0dXJlLmRpbWVuc2lvbnMud2lkdGg7XHJcbiAgICBjcmVhdHVyZS5wb3NpdGlvbi54ICs9IGNyZWF0dXJlLnNwZWVkICogY3JlYXR1cmUuZGltZW5zaW9ucy53aWR0aDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IE5ldXJvbiBmcm9tIFwiLi4vbmV1cm9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR29FYXN0IGV4dGVuZHMgTmV1cm9uIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHN1cGVyKFwiR29FYXN0XCIpO1xyXG4gIH1cclxuXHJcbiAgYXBwbHlBY3Rpb24oY3JlYXR1cmUpIHtcclxuICAgIGNyZWF0dXJlLnBvc2l0aW9uLnggKz0gY3JlYXR1cmUuc3BlZWQgKiBjcmVhdHVyZS5kaW1lbnNpb25zLndpZHRoO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTmV1cm9uIGZyb20gXCIuLi9uZXVyb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHb1NvdXRoRWFzdCBleHRlbmRzIE5ldXJvbiB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcIkdvU291dGhFYXN0XCIpO1xyXG4gIH1cclxuXHJcbiAgYXBwbHlBY3Rpb24oY3JlYXR1cmUpIHtcclxuICAgIGNyZWF0dXJlLnBvc2l0aW9uLnggKz0gY3JlYXR1cmUuc3BlZWQgKiBjcmVhdHVyZS5kaW1lbnNpb25zLndpZHRoO1xyXG4gICAgY3JlYXR1cmUucG9zaXRpb24ueSArPSBjcmVhdHVyZS5zcGVlZCAqIGNyZWF0dXJlLmRpbWVuc2lvbnMud2lkdGg7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBOZXVyb24gZnJvbSBcIi4uL25ldXJvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdvU291dGggZXh0ZW5kcyBOZXVyb24ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXCJHb1NvdXRoXCIpO1xyXG4gIH1cclxuXHJcbiAgYXBwbHlBY3Rpb24oY3JlYXR1cmUpIHtcclxuICAgIGNyZWF0dXJlLnBvc2l0aW9uLnkgKz0gY3JlYXR1cmUuc3BlZWQgKiBjcmVhdHVyZS5kaW1lbnNpb25zLndpZHRoO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTmV1cm9uIGZyb20gXCIuLi9uZXVyb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHb1NvdXRoV2VzdCBleHRlbmRzIE5ldXJvbiB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcIkdvU291dGhXZXN0XCIpO1xyXG4gIH1cclxuXHJcbiAgYXBwbHlBY3Rpb24oY3JlYXR1cmUpIHtcclxuICAgIGNyZWF0dXJlLnBvc2l0aW9uLnkgKz0gY3JlYXR1cmUuc3BlZWQgKiBjcmVhdHVyZS5kaW1lbnNpb25zLndpZHRoO1xyXG4gICAgY3JlYXR1cmUucG9zaXRpb24ueCAtPSBjcmVhdHVyZS5zcGVlZCAqIGNyZWF0dXJlLmRpbWVuc2lvbnMud2lkdGg7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBOZXVyb24gZnJvbSBcIi4uL25ldXJvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdvV2VzdCBleHRlbmRzIE5ldXJvbiB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcihcIkdvV2VzdFwiKTtcclxuICB9XHJcblxyXG4gIGFwcGx5QWN0aW9uKGNyZWF0dXJlKSB7XHJcbiAgICBjcmVhdHVyZS5wb3NpdGlvbi54IC09IGNyZWF0dXJlLnNwZWVkICogY3JlYXR1cmUuZGltZW5zaW9ucy53aWR0aDtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IE5ldXJvbiBmcm9tIFwiLi4vbmV1cm9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgR29Ob3J0aFdlc3QgZXh0ZW5kcyBOZXVyb24ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXCJHb05vcnRoV2VzdFwiKTtcclxuICB9XHJcblxyXG4gIGFwcGx5QWN0aW9uKGNyZWF0dXJlKSB7XHJcbiAgICBjcmVhdHVyZS5wb3NpdGlvbi55IC09IGNyZWF0dXJlLnNwZWVkICogY3JlYXR1cmUuZGltZW5zaW9ucy53aWR0aDtcclxuICAgIGNyZWF0dXJlLnBvc2l0aW9uLnggLT0gY3JlYXR1cmUuc3BlZWQgKiBjcmVhdHVyZS5kaW1lbnNpb25zLndpZHRoO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgTmV1cm9uIGZyb20gXCIuLi9uZXVyb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBEb05vdGhpbmcgZXh0ZW5kcyBOZXVyb24ge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXCJEb05vdGhpbmdcIik7XHJcbiAgfVxyXG5cclxuICBhcHBseUFjdGlvbihjcmVhdHVyZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjaGVja0JpdCwgc2xpY2UgfSBmcm9tIFwiLi4vYml0LW9wZXJhdGlvbnNcIjtcclxuaW1wb3J0IENvbm5lY3Rpb24gZnJvbSBcIi4vY29ubmVjdGlvblwiO1xyXG5pbXBvcnQgTmV1cm9uIGZyb20gXCIuL25ldXJvblwiO1xyXG5pbXBvcnQgeyBHb05vcnRoIH0gZnJvbSBcIi4vb3V0cHV0cy9Hb05vcnRoXCI7XHJcbmltcG9ydCB7IEdvTm9ydGhFYXN0IH0gZnJvbSBcIi4vb3V0cHV0cy9Hb05vcnRoRWFzdFwiO1xyXG5pbXBvcnQgeyBHb0Vhc3QgfSBmcm9tIFwiLi9vdXRwdXRzL0dvRWFzdFwiO1xyXG5pbXBvcnQgeyBHb1NvdXRoRWFzdCB9IGZyb20gXCIuL291dHB1dHMvR29Tb3V0aEVhc3RcIjtcclxuaW1wb3J0IHsgR29Tb3V0aCB9IGZyb20gXCIuL291dHB1dHMvR29Tb3V0aFwiO1xyXG5pbXBvcnQgeyBHb1NvdXRoV2VzdCB9IGZyb20gXCIuL291dHB1dHMvR29Tb3V0aFdlc3RcIjtcclxuaW1wb3J0IHsgR29XZXN0IH0gZnJvbSBcIi4vb3V0cHV0cy9Hb1dlc3RcIjtcclxuaW1wb3J0IHsgR29Ob3J0aFdlc3QgfSBmcm9tIFwiLi9vdXRwdXRzL0dvTm9ydGhXZXN0XCI7XHJcbmltcG9ydCB7IERvTm90aGluZyB9IGZyb20gXCIuL291dHB1dHMvRG9Ob3RoaW5nXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXVyYWxOZXR3b3JrIHtcclxuICBjb25zdHJ1Y3RvcihudW1iZXJPZkhpZGRlbk5ldXJvbnMsIGdlbm9tZSwgc2Vuc2l0aXZpdHlOZXVyb25GYWN0b3J5KSB7XHJcbiAgICB0aGlzLmdlbm9tZSA9IGdlbm9tZTtcclxuICAgIHRoaXMuaGlkZGVuTmV1cm9ucyA9IG5ldyBBcnJheShudW1iZXJPZkhpZGRlbk5ldXJvbnMpO1xyXG5cclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLmhpZGRlbk5ldXJvbnMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIHRoaXMuaGlkZGVuTmV1cm9uc1tpbmRleF0gPSBuZXcgTmV1cm9uKGBIaWRkZW4gTGF5ZXIgJHtpbmRleH1gKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmlucHV0TmV1cm9ucyA9IFtcclxuICAgICAgc2Vuc2l0aXZpdHlOZXVyb25GYWN0b3J5KFwiU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvRWFzdFwiKSxcclxuICAgICAgc2Vuc2l0aXZpdHlOZXVyb25GYWN0b3J5KFwiU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvTm9ydGhcIiksXHJcbiAgICAgIHNlbnNpdGl2aXR5TmV1cm9uRmFjdG9yeShcIlNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb1NvdXRoXCIpLFxyXG4gICAgICBzZW5zaXRpdml0eU5ldXJvbkZhY3RvcnkoXCJTZW5zaXRpdml0eVRvUHJveGltaXR5VG9XZXN0XCIpLFxyXG4gICAgXTtcclxuXHJcbiAgICB0aGlzLm91dHB1dE5ldXJvbnMgPSBbXHJcbiAgICAgIG5ldyBEb05vdGhpbmcoKSxcclxuICAgICAgbmV3IEdvTm9ydGgoKSxcclxuICAgICAgbmV3IEdvTm9ydGhFYXN0KCksXHJcbiAgICAgIG5ldyBHb0Vhc3QoKSxcclxuICAgICAgbmV3IEdvU291dGhFYXN0KCksXHJcbiAgICAgIG5ldyBHb1NvdXRoKCksXHJcbiAgICAgIG5ldyBHb1NvdXRoV2VzdCgpLFxyXG4gICAgICBuZXcgR29XZXN0KCksXHJcbiAgICAgIG5ldyBHb05vcnRoV2VzdCgpLFxyXG4gICAgXTtcclxuXHJcbiAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5nZW5vbWUuc2l6ZTsgaW5kZXgrKykge1xyXG4gICAgICB2YXIgY2hyb21vc29tZSA9IHRoaXMuZ2Vub21lLmNocm9tb3NvbWVzW2luZGV4XTtcclxuICAgICAgdGhpcy5hZGRDb25uZWN0aW9uKGNocm9tb3NvbWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2NhbGVXZWlnaHQod2VpZ2h0LCB4TWluLCB4TWF4LCB5TWluLCB5TWF4KSB7XHJcbiAgICB2YXIgcGVyY2VudCA9ICh3ZWlnaHQgLSB5TWluKSAvICh5TWF4IC0geU1pbik7XHJcbiAgICByZXR1cm4gcGVyY2VudCAqICh4TWF4IC0geE1pbikgKyB4TWluO1xyXG4gIH1cclxuXHJcbiAgLy8gZmlyc3QgYml0IGlzIHNvdXJjZSB0eXBlIChpLmUgMCA9IHNlbnNvciBuZXVyb24sIG9yIDEgaGlkZGVuIG5ldXJvbilcclxuICAvLyBuZXh0IDUgYml0cyBkZXRlcm1pbmUgd2hpY2ggaW5zdGFuY2Ugb2YgdGhhdCBzb3VyY2UgdHlwZSB3ZSBoYXZlXHJcbiAgLy8gbmV4dCBiaXQgaXMgdGhlIHNpbmsgdHlwZSAoaS5lIGFuIGludGVybmFsIG5ldXJvbiBvciBhbiBhY3Rpb24vb3V0cHV0IG5ldXJvbilcclxuICAvLyBuZXh0IDIwIGJpdHMgaXMgdGhlIHdlaWdodCBvZiB0aGUgY29ubmVjdGlvblxyXG5cclxuICAvLyAgICAgIDMxfCAzMC0yNiB8IDI1fCAyNC0yMCB8MTktLS0tLS0tLS0tLS0tLS0tLTBcclxuICAvLyAgICAgICAxfCAwMTExMCB8IDAgfCAxMTAwMCB8MTAwMTAxMTEwMDEwMTEwMDAxMDFcclxuICAvL0UuZy4gICAwfCAwMDAxMSB8IDAgfCAwMTEwMCB8MTEwMDExMDAxMTAwMTEwMDExMDBcclxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwMDAwMDAwMDAwMDAwMDAwMDBcclxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTExMTExMTExMTExMTExMTExMTEgPSAwIHRvIDEwNDg1NzVcclxuICBhZGRDb25uZWN0aW9uKGNocm9tb3NvbWUpIHtcclxuICAgIHZhciBzb3VyY2VJc0FuSW5wdXROZXVyb24gPSBjaGVja0JpdChjaHJvbW9zb21lLCAzMSk7IC8vIDAgYmFzZWQgaW5kZXggb24gdGhlIGJpdHMsIGkuZS4gMCBpcyBmdXJ0aGVzdCByaWdodCAobGVhc3Qgc2lnbmlmaWNhbnQgYml0KVxyXG4gICAgdmFyIGdldFNvdXJjZUluc3RhbmNlID0gc2xpY2UoY2hyb21vc29tZSwgMjYsIDMwKSAlIChzb3VyY2VJc0FuSW5wdXROZXVyb24gPyB0aGlzLmlucHV0TmV1cm9ucy5sZW5ndGggOiB0aGlzLmhpZGRlbk5ldXJvbnMubGVuZ3RoKTtcclxuICAgIHZhciBzaW5rSXNBbk91dHB1dE5ldXJvbiA9IGNoZWNrQml0KGNocm9tb3NvbWUsIDI1KTtcclxuICAgIHZhciBnZXRPdXRwdXRJbnN0YW5jZSA9IHNsaWNlKGNocm9tb3NvbWUsIDIwLCAyNCkgJSAoc2lua0lzQW5PdXRwdXROZXVyb24gPyB0aGlzLm91dHB1dE5ldXJvbnMubGVuZ3RoIDogdGhpcy5oaWRkZW5OZXVyb25zLmxlbmd0aCk7XHJcbiAgICB2YXIgd2VpZ2h0ID0gdGhpcy5zY2FsZVdlaWdodChzbGljZShjaHJvbW9zb21lLCAwLCAxOSksIC00LCA0LCAwLCAxMDQ4NTc1KTtcclxuXHJcbiAgICB2YXIgc291cmNlO1xyXG4gICAgdmFyIHNpbms7XHJcblxyXG4gICAgaWYgKHNvdXJjZUlzQW5JbnB1dE5ldXJvbikge1xyXG4gICAgICAvLyBnZXQgdGhlIHNlbnNvciB0eXBlXHJcbiAgICAgIHNvdXJjZSA9IHRoaXMuaW5wdXROZXVyb25zW2dldFNvdXJjZUluc3RhbmNlXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIHRoaXMgaXMgYSBoaWRkZW4gbGF5ZXIgbmV1cm9uXHJcbiAgICAgIHNvdXJjZSA9IHRoaXMuaGlkZGVuTmV1cm9uc1tnZXRTb3VyY2VJbnN0YW5jZV07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHNpbmtJc0FuT3V0cHV0TmV1cm9uKSB7XHJcbiAgICAgIC8vIGdldCB0aGUgYWN0aW9uIHR5cGVcclxuICAgICAgc2luayA9IHRoaXMub3V0cHV0TmV1cm9uc1tnZXRPdXRwdXRJbnN0YW5jZV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyB0aGlzIGlzIGEgaGlkZGVuIGxheWVyIG5ldXJvblxyXG4gICAgICBzaW5rID0gdGhpcy5oaWRkZW5OZXVyb25zW2dldE91dHB1dEluc3RhbmNlXTtcclxuICAgIH1cclxuXHJcbiAgICBzaW5rLmFkZENvbm5lY3Rpb24obmV3IENvbm5lY3Rpb24oc291cmNlLCBzaW5rLCB3ZWlnaHQpKTtcclxuICB9XHJcblxyXG4gIGZlZWRGb3J3YXJkKGNyZWF0dXJlKSB7XHJcbiAgICAvLyBPbmx5IHJldHVybiBvdXRwdXQgbmV1cm9ucyB3aXRoIGEgcG9zaXRpdmUgXCJwcm9iYWJpbGl0eVwiXHJcbiAgICByZXR1cm4gdGhpcy5vdXRwdXROZXVyb25zLmZpbHRlcigobikgPT4ge1xyXG4gICAgICB2YXIgb3V0cHV0Rm9yTiA9IHRoaXMuZmVlZEZvcndhcmRQZXIobiwgY3JlYXR1cmUpO1xyXG4gICAgICBuLnVwZGF0ZUxhc3RWYWx1ZShvdXRwdXRGb3JOKTtcclxuICAgICAgcmV0dXJuIG91dHB1dEZvck4gPiAwO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmZWVkRm9yd2FyZFBlcihuZXVyb24sIGNyZWF0dXJlKSB7XHJcbiAgICB2YXIgZGVwdGggPSAwO1xyXG5cclxuICAgIGxldCBnZXRJbnB1dCA9IChjb25uZWN0aW9uLCBzZWVuTm9kZXMpID0+IHtcclxuICAgICAgZGVwdGgrKztcclxuICAgICAgaWYgKGRlcHRoID4gMTUpIHtcclxuICAgICAgICBkZWJ1Z2dlcjtcclxuICAgICAgfVxyXG4gICAgICAvLyB0aGlzIGNvbm5lY3Rpb24gaGFzIGEgc291cmNlIGFuZCBhIHdlaWdodCwgbmVlZCB0byBnZXQgdGhlIHNvdXJjZSBpbnB1dCB2YWx1ZSAqIHdlaWdodCBhbmQgcmV0dXJuIHRoYXRcclxuICAgICAgdmFyIHNpbmsgPSBjb25uZWN0aW9uLnNpbms7XHJcbiAgICAgIHZhciBzb3VyY2UgPSBjb25uZWN0aW9uLnNvdXJjZTtcclxuICAgICAgdmFyIHdlaWdodCA9IGNvbm5lY3Rpb24ud2VpZ2h0O1xyXG4gICAgICBzZWVuTm9kZXMuc2V0KHNpbmssIHNpbmsuZ2V0VmFsdWUoY3JlYXR1cmUpKTtcclxuXHJcbiAgICAgIGlmIChzZWVuTm9kZXMuaGFzKHNvdXJjZSkpIHtcclxuICAgICAgICByZXR1cm4gc2Vlbk5vZGVzLmdldChzb3VyY2UpO1xyXG4gICAgICB9IGVsc2UgaWYgKHNvdXJjZS5jb25uZWN0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAvLyB3ZSdyZSBhdCB0aGUgdG9wIG9mIHRoZSB0cmVlIHNvIHJldHVybiB0aGUgdmFsdWUgb2YgdGhlIGlucHV0ICogd2VpZ2h0XHJcbiAgICAgICAgdmFyIGlucHV0ID0gc291cmNlLmdldFZhbHVlKGNyZWF0dXJlKTtcclxuICAgICAgICByZXR1cm4gaW5wdXQgKiB3ZWlnaHQ7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gd2Ugc3RpbGwgaGF2ZSBtb3JlIGNvbm5lY3Rpb25zIHRvIGdldFxyXG4gICAgICAgIHZhciBzdW1PZldlaWdodGVkSW5wdXRzID0gMDtcclxuICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgc291cmNlLmNvbm5lY3Rpb25zLmxlbmd0aDsgaW5kZXgrKykge1xyXG4gICAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IHNvdXJjZS5jb25uZWN0aW9uc1tpbmRleF07XHJcbiAgICAgICAgICBzdW1PZldlaWdodGVkSW5wdXRzICs9IGdldElucHV0KGNvbm5lY3Rpb24sIHNlZW5Ob2Rlcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gTWF0aC50YW5oKHN1bU9mV2VpZ2h0ZWRJbnB1dHMpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzdW1PZldlaWdodGVkSW5wdXRzID0gMDtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBuZXVyb24uY29ubmVjdGlvbnMubGVuZ3RoOyBpbmRleCsrKSB7XHJcbiAgICAgIGNvbnN0IHNlZW5Ob2RlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgY29uc3QgY29ubmVjdGlvbiA9IG5ldXJvbi5jb25uZWN0aW9uc1tpbmRleF07XHJcbiAgICAgIHN1bU9mV2VpZ2h0ZWRJbnB1dHMgKz0gZ2V0SW5wdXQoY29ubmVjdGlvbiwgc2Vlbk5vZGVzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLnRhbmgoc3VtT2ZXZWlnaHRlZElucHV0cyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBDcmVhdHVyZSBmcm9tIFwiLi9jcmVhdHVyZS5qc1wiO1xyXG5pbXBvcnQgR2FtZSBmcm9tIFwiLi9nYW1lLmpzXCI7XHJcbmltcG9ydCBHZW5vbWUgZnJvbSBcIi4vZ2Vub21lLmpzXCI7XHJcbmltcG9ydCBTZW5zaXRpdml0eVRvUHJveGltaXR5VG9FYXN0IGZyb20gXCIuL25uL2lucHV0cy9TZW5zaXRpdml0eVRvUHJveGltaXR5VG9FYXN0XCI7XHJcbmltcG9ydCBTZW5zaXRpdml0eVRvUHJveGltaXR5VG9XZXN0IGZyb20gXCIuL25uL2lucHV0cy9TZW5zaXRpdml0eVRvUHJveGltaXR5VG9XZXN0XCI7XHJcbmltcG9ydCBTZW5zaXRpdml0eVRvUHJveGltaXR5VG9Tb3V0aCBmcm9tIFwiLi9ubi9pbnB1dHMvU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvU291dGhcIjtcclxuaW1wb3J0IFNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb05vcnRoIGZyb20gXCIuL25uL2lucHV0cy9TZW5zaXRpdml0eVRvUHJveGltaXR5VG9Ob3J0aFwiO1xyXG5pbXBvcnQgTmV1cmFsTmV0d29yayBmcm9tIFwiLi9ubi9uZXVyYWwtbmV0d29yay5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2ltdWxhdGlvbiB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBzaXplT2ZQb3B1bGF0aW9uLFxyXG4gICAgbnVtYmVyT2ZHZW5lcmF0aW9uc1RvUnVuLFxyXG4gICAgbW92ZXNQZXJHZW5lcmF0aW9uLFxyXG4gICAgZnJhbWVzUGVyU2Vjb25kLFxyXG4gICAgc2l6ZU9mR2Vub21lLFxyXG4gICAgbnVtYmVyT2ZOZXVyb25zSW5IaWRkZW5MYXllcixcclxuICAgIG11dGF0aW9uUmF0ZSxcclxuICAgIHN1Y2Nlc3NDcml0ZXJpYVZpc3VhbGl6YXRpb25cclxuICApIHtcclxuICAgIHRoaXMuc2l6ZU9mUG9wdWxhdGlvbiA9IHNpemVPZlBvcHVsYXRpb247XHJcbiAgICB0aGlzLm51bWJlck9mR2VuZXJhdGlvbnNUb1J1biA9IG51bWJlck9mR2VuZXJhdGlvbnNUb1J1bjtcclxuICAgIHRoaXMubW92ZXNQZXJHZW5lcmF0aW9uID0gbW92ZXNQZXJHZW5lcmF0aW9uO1xyXG4gICAgdGhpcy5mcmFtZXNQZXJTZWNvbmQgPSBmcmFtZXNQZXJTZWNvbmQ7XHJcbiAgICB0aGlzLnNpemVPZkdlbm9tZSA9IHNpemVPZkdlbm9tZTtcclxuICAgIHRoaXMubnVtYmVyT2ZOZXVyb25zSW5IaWRkZW5MYXllciA9IG51bWJlck9mTmV1cm9uc0luSGlkZGVuTGF5ZXI7XHJcbiAgICB0aGlzLm11dGF0aW9uUmF0ZSA9IG11dGF0aW9uUmF0ZTtcclxuICAgIHRoaXMuc3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbiA9IHN1Y2Nlc3NDcml0ZXJpYVZpc3VhbGl6YXRpb247XHJcblxyXG4gICAgdGhpcy5fc2Vuc2l0aXZpdHlOZXVyb25GYWN0b3J5ID0gKGdhbWUpID0+ICh0eXBlKSA9PiB7XHJcbiAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgIGNhc2UgXCJTZW5zaXRpdml0eVRvUHJveGltaXR5VG9FYXN0XCI6XHJcbiAgICAgICAgICByZXR1cm4gbmV3IFNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb0Vhc3QoZ2FtZSk7XHJcbiAgICAgICAgY2FzZSBcIlNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb1dlc3RcIjpcclxuICAgICAgICAgIHJldHVybiBuZXcgU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvV2VzdChnYW1lKTtcclxuICAgICAgICBjYXNlIFwiU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvU291dGhcIjpcclxuICAgICAgICAgIHJldHVybiBuZXcgU2Vuc2l0aXZpdHlUb1Byb3hpbWl0eVRvU291dGgoZ2FtZSk7XHJcbiAgICAgICAgY2FzZSBcIlNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb05vcnRoXCI6XHJcbiAgICAgICAgICByZXR1cm4gbmV3IFNlbnNpdGl2aXR5VG9Qcm94aW1pdHlUb05vcnRoKGdhbWUpO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLmN1cnJlbnRTdGVwQ291bnQgPSAwO1xyXG4gICAgdGhpcy5jdXJyZW50R2VuZXJhdGlvbkNvdW50ID0gMDtcclxuICAgIHRoaXMuZ2VuZXJhdGlvbkNvdW50TGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDFcIik7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZ2VuZXJhdGlvbkNvdW50TGFiZWwpO1xyXG4gICAgdGhpcy5zdGVwQ291bnRMYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5zdGVwQ291bnRMYWJlbCk7XHJcbiAgfVxyXG5cclxuICBfcmFuZG9tTnVtYmVyQmV0d2VlbihtaW4sIG1heCkge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgMSk7XHJcbiAgfVxyXG5cclxuICBfcm91bmRUb05lYXJlc3QobnVtYmVyVG9Sb3VuZCwgdmFsdWVUb05lYXJlc3QpIHtcclxuICAgIHJldHVybiBNYXRoLmNlaWwobnVtYmVyVG9Sb3VuZCAvIHZhbHVlVG9OZWFyZXN0KSAqIHZhbHVlVG9OZWFyZXN0O1xyXG4gIH1cclxuXHJcbiAgX2dldFBvc2l0aW9uV2l0aGluKGdhbWUpIHtcclxuICAgIHJldHVybiB0aGlzLl9yb3VuZFRvTmVhcmVzdCh0aGlzLl9yYW5kb21OdW1iZXJCZXR3ZWVuKDAsIGdhbWUud2lkdGggKiBnYW1lLmRpdmlzaW9uU2l6ZSAtIGdhbWUuZGl2aXNpb25TaXplKSwgZ2FtZS5kaXZpc2lvblNpemUpO1xyXG4gIH1cclxuXHJcbiAgX2luaXRpYWxpc2VHYW1lKCkge1xyXG4gICAgdGhpcy5nYW1lID0gbmV3IEdhbWUoMTI4LCAxMjgsIDUsIGZhbHNlLCB0aGlzLnN1Y2Nlc3NDcml0ZXJpYVZpc3VhbGl6YXRpb24pO1xyXG4gIH1cclxuXHJcbiAgX2dlbmVyYXRlSW5pdGlhbENvaG9ydCgpIHtcclxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnNpemVPZlBvcHVsYXRpb247IGluZGV4KyspIHtcclxuICAgICAgLy8gMCwwIHRvIDYzNSw2MzVcclxuICAgICAgY29uc3QgZ2Vub21lID0gbmV3IEdlbm9tZSh0aGlzLnNpemVPZkdlbm9tZSk7XHJcbiAgICAgIGNvbnN0IG5ldXJhbE5ldHdvcmsgPSBuZXcgTmV1cmFsTmV0d29yayh0aGlzLm51bWJlck9mTmV1cm9uc0luSGlkZGVuTGF5ZXIsIGdlbm9tZSwgdGhpcy5fc2Vuc2l0aXZpdHlOZXVyb25GYWN0b3J5KHRoaXMuZ2FtZSkpO1xyXG4gICAgICBjb25zdCBjcmVhdHVyZSA9IG5ldyBDcmVhdHVyZShcclxuICAgICAgICBnZW5vbWUsXHJcbiAgICAgICAgbmV1cmFsTmV0d29yayxcclxuICAgICAgICB0aGlzLl9nZXRQb3NpdGlvbldpdGhpbih0aGlzLmdhbWUpLFxyXG4gICAgICAgIHRoaXMuX2dldFBvc2l0aW9uV2l0aGluKHRoaXMuZ2FtZSksXHJcbiAgICAgICAgdGhpcy5nYW1lLmRpdmlzaW9uU2l6ZSxcclxuICAgICAgICB0aGlzLmdhbWUud2lkdGgsXHJcbiAgICAgICAgdGhpcy5nYW1lLmhlaWdodCxcclxuICAgICAgICAxLFxyXG4gICAgICAgIGZhbHNlXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuZ2FtZS5hZGRDcmVhdHVyZShjcmVhdHVyZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBfZ2VuZXJhdGVOZXh0Q29ob3J0KHN1cnZpdm9ycykge1xyXG4gICAgdGhpcy5nYW1lLmdhbWVDcmVhdHVyZXMgPSBbXTtcclxuICAgIGZvciAobGV0IGluZGV4T25lID0gMCwgaW5kZXhUd28gPSAyOyBpbmRleFR3byA8IHN1cnZpdm9ycy5sZW5ndGg7IGluZGV4T25lKyssIGluZGV4VHdvKyspIHtcclxuICAgICAgaWYgKHRoaXMuZ2FtZS5nYW1lQ3JlYXR1cmVzLmxlbmd0aCA+IHRoaXMuc2l6ZU9mUG9wdWxhdGlvbikge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiSGl0IHBvcHVsYXRpb24gbGltaXRcIik7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgcGFyZW50T25lID0gc3Vydml2b3JzW2luZGV4T25lXTtcclxuICAgICAgY29uc3QgcGFyZW50VHdvID0gc3Vydml2b3JzW2luZGV4T25lICsgMV07XHJcbiAgICAgIGNvbnN0IHBhcmVudE9uZUdlbm9tZSA9IHBhcmVudE9uZS5nZW5vbWU7XHJcbiAgICAgIGNvbnN0IHBhcmVudFR3b0dlbm9tZSA9IHBhcmVudFR3by5nZW5vbWU7XHJcbiAgICAgIHZhciBjaGlsZEdlbm9tZU9uZSA9IEdlbm9tZS5jcmVhdGVOZXdHZW5vbWVGcm9tUGFyZW50cyhwYXJlbnRPbmVHZW5vbWUsIHBhcmVudFR3b0dlbm9tZSwgdGhpcy5tdXRhdGlvblJhdGUpO1xyXG4gICAgICB2YXIgY2hpbGRHZW5vbWVUd28gPSBHZW5vbWUuY3JlYXRlTmV3R2Vub21lRnJvbVBhcmVudHMocGFyZW50VHdvR2Vub21lLCBwYXJlbnRPbmVHZW5vbWUsIHRoaXMubXV0YXRpb25SYXRlKTtcclxuICAgICAgY29uc3QgbmV1cmFsTmV0d29ya09uZSA9IG5ldyBOZXVyYWxOZXR3b3JrKFxyXG4gICAgICAgIHRoaXMubnVtYmVyT2ZOZXVyb25zSW5IaWRkZW5MYXllcixcclxuICAgICAgICBjaGlsZEdlbm9tZU9uZSxcclxuICAgICAgICB0aGlzLl9zZW5zaXRpdml0eU5ldXJvbkZhY3RvcnkodGhpcy5nYW1lKVxyXG4gICAgICApO1xyXG4gICAgICBjb25zdCBuZXVyYWxOZXR3b3JrVHdvID0gbmV3IE5ldXJhbE5ldHdvcmsoXHJcbiAgICAgICAgdGhpcy5udW1iZXJPZk5ldXJvbnNJbkhpZGRlbkxheWVyLFxyXG4gICAgICAgIGNoaWxkR2Vub21lVHdvLFxyXG4gICAgICAgIHRoaXMuX3NlbnNpdGl2aXR5TmV1cm9uRmFjdG9yeSh0aGlzLmdhbWUpXHJcbiAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBjcmVhdHVyZU9uZSA9IG5ldyBDcmVhdHVyZShcclxuICAgICAgICBjaGlsZEdlbm9tZU9uZSxcclxuICAgICAgICBuZXVyYWxOZXR3b3JrT25lLFxyXG4gICAgICAgIHRoaXMuX2dldFBvc2l0aW9uV2l0aGluKHRoaXMuZ2FtZSksXHJcbiAgICAgICAgdGhpcy5fZ2V0UG9zaXRpb25XaXRoaW4odGhpcy5nYW1lKSxcclxuICAgICAgICB0aGlzLmdhbWUuZGl2aXNpb25TaXplLFxyXG4gICAgICAgIHRoaXMuZ2FtZS53aWR0aCxcclxuICAgICAgICB0aGlzLmdhbWUuaGVpZ2h0LFxyXG4gICAgICAgIDEsXHJcbiAgICAgICAgZmFsc2VcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IGNyZWF0dXJlVHdvID0gbmV3IENyZWF0dXJlKFxyXG4gICAgICAgIGNoaWxkR2Vub21lVHdvLFxyXG4gICAgICAgIG5ldXJhbE5ldHdvcmtUd28sXHJcbiAgICAgICAgdGhpcy5fZ2V0UG9zaXRpb25XaXRoaW4odGhpcy5nYW1lKSxcclxuICAgICAgICB0aGlzLl9nZXRQb3NpdGlvbldpdGhpbih0aGlzLmdhbWUpLFxyXG4gICAgICAgIHRoaXMuZ2FtZS5kaXZpc2lvblNpemUsXHJcbiAgICAgICAgdGhpcy5nYW1lLndpZHRoLFxyXG4gICAgICAgIHRoaXMuZ2FtZS5oZWlnaHQsXHJcbiAgICAgICAgMSxcclxuICAgICAgICBmYWxzZVxyXG4gICAgICApO1xyXG5cclxuICAgICAgdGhpcy5nYW1lLmFkZENyZWF0dXJlKGNyZWF0dXJlT25lKTtcclxuICAgICAgdGhpcy5nYW1lLmFkZENyZWF0dXJlKGNyZWF0dXJlVHdvKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9hbmltYXRlKCkge1xyXG4gICAgdGhpcy5zdGVwQ291bnRMYWJlbC5pbm5lclRleHQgPSBgR2VuZXJhdGlvbiBTdGVwIENvdW50OiAke3RoaXMuY3VycmVudFN0ZXBDb3VudCsrfWA7XHJcbiAgICB0aGlzLmdhbWUudXBkYXRlKHRoaXMuY3VycmVudFN0ZXBDb3VudCk7XHJcbiAgICBpZiAodGhpcy5jdXJyZW50U3RlcENvdW50IDw9IHRoaXMubW92ZXNQZXJHZW5lcmF0aW9uKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuX2FuaW1hdGUuYmluZCh0aGlzKSksIDEwMDAgLyB0aGlzLmZyYW1lc1BlclNlY29uZCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBUaGlzIGdlbmVyYXRpb24gaGFzIGZpbmlzaGVkLCB0aW1lIHRvIGdldCB0aGUgc3Vydml2b3JzIHRvIHJlcHJvZHVjZVxyXG4gICAgICAvLyBUaGVuIHNldCB0aGUgYm9hcmQgYmFjayB3aXRoIHRoZSBuZXcgZ2VuZXJhdGlvblxyXG4gICAgICB0aGlzLmdlbmVyYXRpb25Db3VudExhYmVsLmlubmVyVGV4dCA9IGBHZW4gJHsrK3RoaXMuY3VycmVudEdlbmVyYXRpb25Db3VudH1gO1xyXG4gICAgICBjb25zdCBzdXJ2aXZvcnMgPSB0aGlzLmdhbWUuZ2V0U3Vydml2b3JzKHRoaXMuc3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbi5zdWNjZXNzQ3JpdGVyaWEpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgTnVtYmVyIG9mIHN1cnZpdm9ycyAke3N1cnZpdm9ycy5sZW5ndGh9LmApO1xyXG4gICAgICB0aGlzLl9nZW5lcmF0ZU5leHRDb2hvcnQoc3Vydml2b3JzKTtcclxuICAgICAgdGhpcy5jdXJyZW50U3RlcENvdW50ID0gMDtcclxuICAgICAgdGhpcy5fYW5pbWF0ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICB0aGlzLmdlbmVyYXRpb25Db3VudExhYmVsLmlubmVyVGV4dCA9IGBHZW4gJHt0aGlzLmN1cnJlbnRHZW5lcmF0aW9uQ291bnR9YDtcclxuICAgIHRoaXMuX2luaXRpYWxpc2VHYW1lKCk7XHJcbiAgICB0aGlzLl9nZW5lcmF0ZUluaXRpYWxDb2hvcnQoKTtcclxuICAgIHRoaXMuX2FuaW1hdGUoKTtcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')}]);