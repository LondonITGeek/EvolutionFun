!function(n){var c={};function t(i){if(c[i])return c[i].exports;var g=c[i]={i:i,l:!1,exports:{}};return n[i].call(g.exports,g,g.exports,t),g.l=!0,g.exports}t.m=n,t.c=c,t.d=function(n,c,i){t.o(n,c)||Object.defineProperty(n,c,{enumerable:!0,get:i})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,c){if(1&c&&(n=t(n)),8&c)return n;if(4&c&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&c&&"string"!=typeof n)for(var g in n)t.d(i,g,function(c){return n[c]}.bind(null,g));return i},t.n=function(n){var c=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(c,"a",c),c},t.o=function(n,c){return Object.prototype.hasOwnProperty.call(n,c)},t.p="",t(t.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/creature.js\nclass Creature {\r\n  // gnome\r\n  // brain\r\n\r\n  constructor(startingX, startingY, dimension, gameWidth, gameHeight, speed, colour, drawInfo) {\r\n    this.gameWidth = gameWidth;\r\n    this.gameHeight = gameHeight;\r\n    this.speed = speed;\r\n    this.colour = colour;\r\n    this.drawInfo = drawInfo;\r\n    this.dimensions = {\r\n      width: dimension,\r\n      height: dimension,\r\n    };\r\n\r\n    this.position = {\r\n      x: startingX,\r\n      y: startingY,\r\n    };\r\n  }\r\n\r\n  drawerLable(ctx) {\r\n    ctx.fillText(`${this.position.x}:${this.position.y}`, this.position.x - 10, this.position.y - 10);\r\n  }\r\n\r\n  drawer(ctx) {\r\n    ctx.fillStyle = this.colour;\r\n    ctx.beginPath();\r\n    ctx.ellipse(\r\n      this.position.x + this.dimensions.width / 2,\r\n      this.position.y + this.dimensions.height / 2,\r\n      this.dimensions.width / 2,\r\n      this.dimensions.height / 2,\r\n      0,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    if (this.drawInfo) {\r\n      this.drawerLable(ctx);\r\n    }\r\n  }\r\n\r\n  update() {\r\n    const currentPosition = {\r\n      ...this.position,\r\n    };\r\n\r\n    switch (Math.floor(Math.random() * 4) + 1) {\r\n      case 1: // right\r\n        this.position.x += this.speed * this.dimensions.width;\r\n        break;\r\n      case 2: // left\r\n        this.position.x -= this.speed * this.dimensions.width;\r\n        break;\r\n      case 3: // up\r\n        this.position.y -= this.speed * this.dimensions.width;\r\n        break;\r\n      case 4: // down\r\n        this.position.y += this.speed * this.dimensions.width;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (\r\n      this.position.x < 0 ||\r\n      this.position.x >= this.gameWidth * this.dimensions.width ||\r\n      this.position.y < 0 ||\r\n      this.position.y >= this.gameHeight * this.dimensions.height\r\n    ) {\r\n      console.log("Hit Edge");\r\n      this.position = currentPosition;\r\n    }\r\n  }\r\n\r\n  updateAndRedrawer(ctx) {\r\n    this.update();\r\n    this.drawer(ctx);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/game.js\nclass Game {\r\n  constructor(GAME_HEIGHT, GAME_WIDTH, DIVISION_SIZE, SHOW_GRAPH) {\r\n    this.height = GAME_HEIGHT;\r\n    this.width = GAME_WIDTH;\r\n    this.divisionSize = DIVISION_SIZE;\r\n    this.showGraph = SHOW_GRAPH;\r\n    this.gameComponents = [];\r\n\r\n    this.canvas = document.createElement("canvas");\r\n    this.canvas.setAttribute("id", "canvas");\r\n    this.canvas.setAttribute("width", GAME_WIDTH * DIVISION_SIZE);\r\n    this.canvas.setAttribute("height", GAME_HEIGHT * DIVISION_SIZE);\r\n    this.canvas.setAttribute("style", "border: 1px solid black; box-sizing: border-box");\r\n    document.body.appendChild(this.canvas);\r\n    this.ctx = canvas.getContext("2d");\r\n  }\r\n\r\n  addGameComponents(gameComponent) {\r\n    this.gameComponents.push(gameComponent);\r\n  }\r\n\r\n  drawGrid() {\r\n    this.ctx.lineWidth = 0.5;\r\n    // Do columns\r\n    for (let index = this.divisionSize; index < this.width * this.divisionSize; index += this.divisionSize) {\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(index, 0);\r\n      this.ctx.lineTo(index, this.height * this.divisionSize);\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    }\r\n\r\n    // Do Rows\r\n    for (let index = this.divisionSize; index < this.height * this.divisionSize; index += this.divisionSize) {\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(0, index);\r\n      this.ctx.lineTo(this.width * this.divisionSize, index);\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.ctx.fillStyle = "white";\r\n    this.ctx.fillRect(0, 0, this.width * this.divisionSize, this.height * this.divisionSize);\r\n    this.gameComponents.forEach((component) => {\r\n      component.updateAndRedrawer(this.ctx);\r\n    });\r\n\r\n    if (this.showGraph) {\r\n      this.drawGrid();\r\n    }\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/genome.js\nclass Genome {\r\n  constructor(size) {\r\n    // array of 32 bit numbers, each is a link in the brain\r\n    this.chromosomes = new Uint32Array(size);\r\n    window.crypto.getRandomValues(this.chromosomes);\r\n  }\r\n\r\n  toString() {\r\n    this.chromosomes.forEach((c) => {\r\n      console.log(c.toString(2));\r\n    });\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/bit-operations.js\nfunction checkBit(number, bitToCheck) {\r\n  var mask = (1 << bitToCheck) >>> 0;\r\n  var result = (number & mask) >>> 0;\r\n  return result !== 0;\r\n}\r\n\r\nfunction slice(number, start, end) {\r\n  var mask = Math.pow(2, end - start + 1) - 1;\r\n  mask = mask << start;\r\n  var result = number & mask;\r\n  return result >> start;\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/connection.js\nclass Connection {\r\n  constructor(source, sink, weight) {\r\n    this.source = source;\r\n    this.sink = sink;\r\n    this.weight = weight;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.source}:${this.sink}:${this.weight}`;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/neuron.js\nclass Neuron {\r\n  constructor(name) {\r\n    this.name = name;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.name}`;\r\n  }\r\n}\r\n\r\n// Input (Sensors)\r\n\r\nclass SensitivityToProximityToEast extends Neuron {\r\n  constructor() {\r\n    super("SensitivityToProximityToEast");\r\n  }\r\n}\r\n\r\nclass SensitivityToProximityToWest extends Neuron {\r\n  constructor() {\r\n    super("SensitivityToProximityToWest");\r\n  }\r\n}\r\n\r\nclass SensitivityToProximityToNorth extends Neuron {\r\n  constructor() {\r\n    super("SensitivityToProximityToNorth");\r\n  }\r\n}\r\n\r\nclass SensitivityToProximityToSouth extends Neuron {\r\n  constructor() {\r\n    super("SensitivityToProximityToSouth");\r\n  }\r\n}\r\n\r\n// Outputs (Actions)\r\n\r\nclass GoEast extends Neuron {\r\n  constructor() {\r\n    super("GoEast");\r\n  }\r\n}\r\n\r\nclass GoWest extends Neuron {\r\n  constructor() {\r\n    super("GoWest");\r\n  }\r\n}\r\n\r\nclass GoNorth extends Neuron {\r\n  constructor() {\r\n    super("GoNorth");\r\n  }\r\n}\r\n\r\nclass GoSouth extends Neuron {\r\n  constructor() {\r\n    super("GoSouth");\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/neural-network.js\n\r\n\r\n\r\n\r\nclass neural_network_NeuralNetwork {\r\n  constructor(numberOfHiddenNeurons) {\r\n    this.hiddenNeurons = new Array(numberOfHiddenNeurons);\r\n    for (let index = 0; index < this.hiddenNeurons.length; index++) {\r\n      this.hiddenNeurons[index] = new Neuron(`Hidden Layer ${index}`);\r\n    }\r\n    this.inputNeurons = [\r\n      new SensitivityToProximityToEast(),\r\n      new SensitivityToProximityToNorth(),\r\n      new SensitivityToProximityToSouth(),\r\n      new SensitivityToProximityToWest(),\r\n    ];\r\n    this.outputNeurons = [new GoEast(), new GoNorth(), new GoSouth(), new GoWest()];\r\n  }\r\n\r\n  scaleWeight(weight, xMin, xMax, yMin, yMax) {\r\n    var percent = (weight - yMin) / (yMax - yMin);\r\n    return percent * (xMax - xMin) + xMin;\r\n  }\r\n\r\n  getConnection(chromosome) {\r\n    // first bit is source type (i.e 0 = sensor neuron, or 1 hidden neuron)\r\n    // next 5 bits determine which instance of that source type we have\r\n    // next bit is the sink type (i.e an internal neuron or an action/output neuron)\r\n    // next 20 bits is the weight of the connection\r\n\r\n    //      31| 30-26 | 25| 24-20 |19-----------------0\r\n    //       1| 01110 | 0 | 11000 |10010111001011000101\r\n    //E.g.   0| 00011 | 0 | 01100 |11001100110011001100\r\n    //                             10000000000000000000\r\n    //                             11111111111111111111 = 1048575 - 0\r\n\r\n    var sourceIsAnInputNeuron = checkBit(chromosome, 31); // 0 based index on the bits, i.e. 0 is furthest right (least significant bit)\r\n    var getSourceInstance = slice(chromosome, 26, 30) % (sourceIsAnInputNeuron ? this.inputNeurons.length : this.hiddenNeurons.length);\r\n    var sinkIsAnOutputNeuron = checkBit(chromosome, 25);\r\n    var getOutputInstance = slice(chromosome, 20, 24) % (sinkIsAnOutputNeuron ? this.outputNeurons.length : this.hiddenNeurons.length);\r\n    var weight = this.scaleWeight(slice(chromosome, 0, 19), -4, 4, 0, 1048575);\r\n    var source;\r\n    var sink;\r\n    if (sourceIsAnInputNeuron) {\r\n      // get the sensor type\r\n      source = this.inputNeurons[getSourceInstance];\r\n    } else {\r\n      // this is a hidden layer neuron\r\n      source = this.hiddenNeurons[getSourceInstance];\r\n    }\r\n\r\n    if (sinkIsAnOutputNeuron) {\r\n      // get the action type\r\n      sink = this.outputNeurons[getOutputInstance];\r\n    } else {\r\n      // this is a hidden layer neuron\r\n      sink = this.hiddenNeurons[getOutputInstance];\r\n    }\r\n\r\n    return new Connection(source, sink, weight);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n\r\n\r\n\r\nfunction getRandomColour() {\r\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\r\n}\r\n\r\nfunction randomNumberBetween(min, max) {\r\n  return Math.floor(Math.random() * (max - min) + 1);\r\n}\r\n\r\nfunction roundToNearest(numberToRound, valueToNearest) {\r\n  return Math.ceil(numberToRound / valueToNearest) * valueToNearest;\r\n}\r\n\r\nfunction getPositionWithin(game) {\r\n  return roundToNearest(randomNumberBetween(0, game.width * game.divisionSize - game.divisionSize), game.divisionSize);\r\n}\r\n\r\nfunction initialiseGame() {\r\n  const game = new Game(128, 128, 5, false);\r\n  const creature = new Creature(\r\n    getPositionWithin(game),\r\n    getPositionWithin(game),\r\n    game.divisionSize,\r\n    game.width,\r\n    game.height,\r\n    1,\r\n    "red",\r\n    true\r\n  );\r\n  game.addGameComponents(creature);\r\n  for (let index = 0; index < 25; index++) {\r\n    // 0,0 to 635,635\r\n    const creature = new Creature(\r\n      getPositionWithin(game),\r\n      getPositionWithin(game),\r\n      game.divisionSize,\r\n      game.width,\r\n      game.height,\r\n      1,\r\n      getRandomColour(),\r\n      false\r\n    );\r\n    game.addGameComponents(creature);\r\n  }\r\n\r\n  return game;\r\n}\r\n\r\nlet src_game = initialiseGame();\r\nlet framesPerSecond = 30;\r\n\r\nfunction animate() {\r\n  src_game.update();\r\n  setTimeout(() => requestAnimationFrame(animate), 1000 / framesPerSecond);\r\n}\r\n\r\nanimate();\r\n\r\nvar n = new Genome(4);\r\nn.toString();\r\n\r\nvar nn = new neural_network_NeuralNetwork(2);\r\nfor (let index = 0; index < 4; index++) {\r\n  var connection = nn.getConnection(n.chromosomes[index]);\r\n  console.log(connection.toString());\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')}]);