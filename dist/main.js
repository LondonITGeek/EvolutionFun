!function(n){var c={};function t(e){if(c[e])return c[e].exports;var r=c[e]={i:e,l:!1,exports:{}};return n[e].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=n,t.c=c,t.d=function(n,c,e){t.o(n,c)||Object.defineProperty(n,c,{enumerable:!0,get:e})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,c){if(1&c&&(n=t(n)),8&c)return n;if(4&c&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&c&&"string"!=typeof n)for(var r in n)t.d(e,r,function(c){return n[c]}.bind(null,r));return e},t.n=function(n){var c=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(c,"a",c),c},t.o=function(n,c){return Object.prototype.hasOwnProperty.call(n,c)},t.p="",t(t.s=0)}([function(module,exports,__webpack_require__){eval("const { default: Simulation } = __webpack_require__(3);\r\nconst { default: SuccessCriteria } = __webpack_require__(1);\r\nconst { SuccessCriteriaVisualization } = __webpack_require__(2);\r\n\r\nvar successCriteriaVisualization = new SuccessCriteriaVisualization(SuccessCriteria.allCornersSuccess());\r\nvar simulation = new Simulation(500, 100, 300, 40, 6, 3, 0.0001, successCriteriaVisualization);\r\nsimulation.start();\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLHNCQUFzQixHQUFHLG1CQUFPLENBQUMsQ0FBYztBQUN0RCxPQUFPLDJCQUEyQixHQUFHLG1CQUFPLENBQUMsQ0FBb0I7QUFDakUsT0FBTywrQkFBK0IsR0FBRyxtQkFBTyxDQUFDLENBQWtDOztBQUVuRjtBQUNBO0FBQ0EiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgZGVmYXVsdDogU2ltdWxhdGlvbiB9ID0gcmVxdWlyZShcIi4vc2ltdWxhdGlvblwiKTtcclxuY29uc3QgeyBkZWZhdWx0OiBTdWNjZXNzQ3JpdGVyaWEgfSA9IHJlcXVpcmUoXCIuL3N1Y2Nlc3MtY3JpdGVyaWFcIik7XHJcbmNvbnN0IHsgU3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbiB9ID0gcmVxdWlyZShcIi4vc3VjY2Vzcy1jcml0ZXJpYS12aXN1YWxpemF0aW9uXCIpO1xyXG5cclxudmFyIHN1Y2Nlc3NDcml0ZXJpYVZpc3VhbGl6YXRpb24gPSBuZXcgU3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbihTdWNjZXNzQ3JpdGVyaWEuYWxsQ29ybmVyc1N1Y2Nlc3MoKSk7XHJcbnZhciBzaW11bGF0aW9uID0gbmV3IFNpbXVsYXRpb24oNTAwLCAxMDAsIDMwMCwgNDAsIDYsIDMsIDAuMDAwMSwgc3VjY2Vzc0NyaXRlcmlhVmlzdWFsaXphdGlvbik7XHJcbnNpbXVsYXRpb24uc3RhcnQoKTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SuccessCriteria; });\nclass SuccessCriteria {\r\n  static topRightCornerSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 440,\r\n        y: 0,\r\n        width: 200,\r\n        height: 200,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static topLeftCornerSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 0,\r\n        width: 200,\r\n        height: 200,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static bottomRightCornerSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 440,\r\n        y: 440,\r\n        width: 200,\r\n        height: 200,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static bottomLeftCornerSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 440,\r\n        width: 200,\r\n        height: 200,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static rightWallSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 540,\r\n        y: 0,\r\n        width: 100,\r\n        height: 640,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static leftWallSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 0,\r\n        width: 100,\r\n        height: 640,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static allCornersSuccess() {\r\n    return [\r\n      ...this.topLeftCornerSuccess(),\r\n      ...this.topRightCornerSuccess(),\r\n      ...this.bottomLeftCornerSuccess(),\r\n      ...this.bottomRightCornerSuccess(),\r\n    ];\r\n  }\r\n\r\n  static rightAndLeftWallSuccess() {\r\n    return [...SuccessCriteria.rightWallSuccess(), ...SuccessCriteria.leftWallSuccess()];\r\n  }\r\n\r\n  static topWallSuccess() {\r\n    return [\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 0,\r\n        width: 640,\r\n        height: 100,\r\n      },\r\n    ];\r\n  }\r\n\r\n  static topAndBottomWallSuccess() {\r\n    return [\r\n      ...SuccessCriteria.topWallSuccess(),\r\n      {\r\n        borderColour: "green",\r\n        x: 0,\r\n        y: 540,\r\n        width: 640,\r\n        height: 100,\r\n      },\r\n    ];\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3VjY2Vzcy1jcml0ZXJpYS5qcz85MTU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBIiwiZmlsZSI6IjEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBTdWNjZXNzQ3JpdGVyaWEge1xyXG4gIHN0YXRpYyB0b3BSaWdodENvcm5lclN1Y2Nlc3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3VyOiBcImdyZWVuXCIsXHJcbiAgICAgICAgeDogNDQwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgd2lkdGg6IDIwMCxcclxuICAgICAgICBoZWlnaHQ6IDIwMCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9wTGVmdENvcm5lclN1Y2Nlc3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3VyOiBcImdyZWVuXCIsXHJcbiAgICAgICAgeDogMCxcclxuICAgICAgICB5OiAwLFxyXG4gICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgaGVpZ2h0OiAyMDAsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJvdHRvbVJpZ2h0Q29ybmVyU3VjY2VzcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHtcclxuICAgICAgICBib3JkZXJDb2xvdXI6IFwiZ3JlZW5cIixcclxuICAgICAgICB4OiA0NDAsXHJcbiAgICAgICAgeTogNDQwLFxyXG4gICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgaGVpZ2h0OiAyMDAsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGJvdHRvbUxlZnRDb3JuZXJTdWNjZXNzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAge1xyXG4gICAgICAgIGJvcmRlckNvbG91cjogXCJncmVlblwiLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogNDQwLFxyXG4gICAgICAgIHdpZHRoOiAyMDAsXHJcbiAgICAgICAgaGVpZ2h0OiAyMDAsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJpZ2h0V2FsbFN1Y2Nlc3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICB7XHJcbiAgICAgICAgYm9yZGVyQ29sb3VyOiBcImdyZWVuXCIsXHJcbiAgICAgICAgeDogNTQwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgd2lkdGg6IDEwMCxcclxuICAgICAgICBoZWlnaHQ6IDY0MCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgbGVmdFdhbGxTdWNjZXNzKCkge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAge1xyXG4gICAgICAgIGJvcmRlckNvbG91cjogXCJncmVlblwiLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogMCxcclxuICAgICAgICB3aWR0aDogMTAwLFxyXG4gICAgICAgIGhlaWdodDogNjQwLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhbGxDb3JuZXJzU3VjY2VzcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIC4uLnRoaXMudG9wTGVmdENvcm5lclN1Y2Nlc3MoKSxcclxuICAgICAgLi4udGhpcy50b3BSaWdodENvcm5lclN1Y2Nlc3MoKSxcclxuICAgICAgLi4udGhpcy5ib3R0b21MZWZ0Q29ybmVyU3VjY2VzcygpLFxyXG4gICAgICAuLi50aGlzLmJvdHRvbVJpZ2h0Q29ybmVyU3VjY2VzcygpLFxyXG4gICAgXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByaWdodEFuZExlZnRXYWxsU3VjY2VzcygpIHtcclxuICAgIHJldHVybiBbLi4uU3VjY2Vzc0NyaXRlcmlhLnJpZ2h0V2FsbFN1Y2Nlc3MoKSwgLi4uU3VjY2Vzc0NyaXRlcmlhLmxlZnRXYWxsU3VjY2VzcygpXTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB0b3BXYWxsU3VjY2VzcygpIHtcclxuICAgIHJldHVybiBbXHJcbiAgICAgIHtcclxuICAgICAgICBib3JkZXJDb2xvdXI6IFwiZ3JlZW5cIixcclxuICAgICAgICB4OiAwLFxyXG4gICAgICAgIHk6IDAsXHJcbiAgICAgICAgd2lkdGg6IDY0MCxcclxuICAgICAgICBoZWlnaHQ6IDEwMCxcclxuICAgICAgfSxcclxuICAgIF07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9wQW5kQm90dG9tV2FsbFN1Y2Nlc3MoKSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAuLi5TdWNjZXNzQ3JpdGVyaWEudG9wV2FsbFN1Y2Nlc3MoKSxcclxuICAgICAge1xyXG4gICAgICAgIGJvcmRlckNvbG91cjogXCJncmVlblwiLFxyXG4gICAgICAgIHg6IDAsXHJcbiAgICAgICAgeTogNTQwLFxyXG4gICAgICAgIHdpZHRoOiA2NDAsXHJcbiAgICAgICAgaGVpZ2h0OiAxMDAsXHJcbiAgICAgIH0sXHJcbiAgICBdO1xyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SuccessCriteriaVisualization", function() { return SuccessCriteriaVisualization; });\nclass SuccessCriteriaVisualization {\r\n  constructor(successCriteria) {\r\n    this.successCriteria = successCriteria;\r\n  }\r\n\r\n  drawer(ctx) {\r\n    this.successCriteria.forEach((criteria) => {\r\n      ctx.lineWidth = 3;\r\n      ctx.strokeStyle = criteria.borderColour;\r\n      ctx.beginPath();\r\n      ctx.rect(criteria.x, criteria.y, criteria.width, criteria.height);\r\n      ctx.stroke();\r\n    });\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc3VjY2Vzcy1jcml0ZXJpYS12aXN1YWxpemF0aW9uLmpzP2Y1ZDkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTdWNjZXNzQ3JpdGVyaWFWaXN1YWxpemF0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihzdWNjZXNzQ3JpdGVyaWEpIHtcclxuICAgIHRoaXMuc3VjY2Vzc0NyaXRlcmlhID0gc3VjY2Vzc0NyaXRlcmlhO1xyXG4gIH1cclxuXHJcbiAgZHJhd2VyKGN0eCkge1xyXG4gICAgdGhpcy5zdWNjZXNzQ3JpdGVyaWEuZm9yRWFjaCgoY3JpdGVyaWEpID0+IHtcclxuICAgICAgY3R4LmxpbmVXaWR0aCA9IDM7XHJcbiAgICAgIGN0eC5zdHJva2VTdHlsZSA9IGNyaXRlcmlhLmJvcmRlckNvbG91cjtcclxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICBjdHgucmVjdChjcml0ZXJpYS54LCBjcml0ZXJpYS55LCBjcml0ZXJpYS53aWR0aCwgY3JpdGVyaWEuaGVpZ2h0KTtcclxuICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/creature.js\nclass Creature {\r\n  constructor(genome, neuralNetwork, startingX, startingY, dimension, gameWidth, gameHeight, speed, drawInfo) {\r\n    this.genome = genome;\r\n    this.neuralNetwork = neuralNetwork;\r\n    this.gameWidth = gameWidth;\r\n    this.gameHeight = gameHeight;\r\n    this.speed = speed;\r\n    this.drawInfo = drawInfo;\r\n    this.dimensions = {\r\n      width: dimension,\r\n      height: dimension,\r\n    };\r\n\r\n    this.position = {\r\n      x: startingX,\r\n      y: startingY,\r\n    };\r\n\r\n    this.generateColour();\r\n  }\r\n\r\n  scaleValue(value, xMin, xMax, yMin, yMax) {\r\n    var percent = (value - yMin) / (yMax - yMin);\r\n    return percent * (xMax - xMin) + xMin;\r\n  }\r\n\r\n  getRandomColour(scaledGenomeNumber) {\r\n    return `#${Math.floor(scaledGenomeNumber * 16777215).toString(16)}`;\r\n  }\r\n\r\n  generateColour() {\r\n    var genomeColour =\r\n      this.genome.chromosomes.reduce((lastValue, currentValue) => {\r\n        lastValue ^= currentValue;\r\n        return lastValue >>> 0;\r\n      }, this.genome.chromosomes[0]) >>> 0;\r\n\r\n    var scaledGenomeColour = this.scaleValue(genomeColour, 0, 1, 0, 4294967295); // Max value of unsigned 32 bit int... 4294967295\r\n    this.colour = this.getRandomColour(scaledGenomeColour);\r\n  }\r\n\r\n  drawerLable(ctx) {\r\n    ctx.fillText(`${this.genome.toString()}`, this.position.x - 10, this.position.y - 10);\r\n  }\r\n\r\n  drawer(ctx) {\r\n    ctx.fillStyle = this.colour;\r\n    ctx.beginPath();\r\n    ctx.ellipse(\r\n      this.position.x + this.dimensions.width / 2,\r\n      this.position.y + this.dimensions.height / 2,\r\n      this.dimensions.width / 2,\r\n      this.dimensions.height / 2,\r\n      0,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    ctx.fill();\r\n    ctx.closePath();\r\n    if (this.drawInfo) {\r\n      this.drawerLable(ctx);\r\n    }\r\n  }\r\n\r\n  update(actionProbabilities) {\r\n    const currentPosition = {\r\n      ...this.position,\r\n    };\r\n\r\n    if (actionProbabilities.length > 0) {\r\n      var currentProbabilityRoll = Math.random();\r\n      var bestAction = actionProbabilities.sort((a, b) => b - a)[0];\r\n      //console.log(bestAction.getValue());\r\n\r\n      if (currentProbabilityRoll < bestAction.getValue()) {\r\n        bestAction.applyAction(this);\r\n      }\r\n      if (\r\n        this.position.x < 0 ||\r\n        this.position.x >= this.gameWidth * this.dimensions.width ||\r\n        this.position.y < 0 ||\r\n        this.position.y >= this.gameHeight * this.dimensions.height\r\n      ) {\r\n        //console.log("Hit Edge");\r\n        this.position = currentPosition;\r\n      }\r\n    }\r\n  }\r\n\r\n  updateAndRedrawer(ctx) {\r\n    var actionProbabilities = this.neuralNetwork.feedForward(this);\r\n    this.update(actionProbabilities);\r\n    this.drawer(ctx);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/game.js\nclass Game {\r\n  constructor(GAME_HEIGHT, GAME_WIDTH, DIVISION_SIZE, SHOW_GRAPH, successCriteria) {\r\n    this.height = GAME_HEIGHT;\r\n    this.width = GAME_WIDTH;\r\n    this.divisionSize = DIVISION_SIZE;\r\n    this.showGraph = SHOW_GRAPH;\r\n    this.successCriteria = successCriteria;\r\n    this.gameCreatures = [];\r\n\r\n    this.canvas = document.createElement("canvas");\r\n    this.canvas.setAttribute("id", "canvas");\r\n    this.canvas.setAttribute("width", GAME_WIDTH * DIVISION_SIZE);\r\n    this.canvas.setAttribute("height", GAME_HEIGHT * DIVISION_SIZE);\r\n    this.canvas.setAttribute("style", "border: 1px solid black; box-sizing: border-box");\r\n    document.body.appendChild(this.canvas);\r\n    this.ctx = canvas.getContext("2d");\r\n  }\r\n\r\n  addCreature(creature) {\r\n    this.gameCreatures.push(creature);\r\n  }\r\n\r\n  getSurvivors(successCriteria) {\r\n    return this.gameCreatures.filter((c) => {\r\n      return successCriteria.some((criteria) => {\r\n        const xBottom = criteria.x + criteria.width;\r\n        const yBottom = criteria.y + criteria.height;\r\n        return c.position.x >= criteria.x && c.position.y >= criteria.y && c.position.x <= xBottom && c.position.y <= yBottom;\r\n      });\r\n    });\r\n  }\r\n\r\n  drawGrid() {\r\n    this.ctx.lineWidth = 0.5;\r\n    // Do columns\r\n    for (let index = this.divisionSize; index < this.width * this.divisionSize; index += this.divisionSize) {\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(index, 0);\r\n      this.ctx.lineTo(index, this.height * this.divisionSize);\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    }\r\n\r\n    // Do Rows\r\n    for (let index = this.divisionSize; index < this.height * this.divisionSize; index += this.divisionSize) {\r\n      this.ctx.beginPath();\r\n      this.ctx.moveTo(0, index);\r\n      this.ctx.lineTo(this.width * this.divisionSize, index);\r\n      this.ctx.stroke();\r\n      this.ctx.closePath();\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.ctx.fillStyle = "white";\r\n    this.ctx.fillRect(0, 0, this.width * this.divisionSize, this.height * this.divisionSize);\r\n    this.gameCreatures.forEach((creature) => {\r\n      creature.updateAndRedrawer(this.ctx);\r\n    });\r\n\r\n    if (this.showGraph) {\r\n      this.drawGrid();\r\n    }\r\n\r\n    this.successCriteria.drawer(this.ctx);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/genome.js\nclass Genome {\r\n  constructor(size, generateRandomValues = true) {\r\n    if (size % 2 !== 0) {\r\n      throw "Genome size must be an even number.";\r\n    }\r\n    this.size = size;\r\n    this.chromosomes = new Uint32Array(size);\r\n    if (generateRandomValues) {\r\n      window.crypto.getRandomValues(this.chromosomes);\r\n    }\r\n  }\r\n\r\n  static createNewGenomeFromParents(genomeOne, genomeTwo) {\r\n    var takeFromParentOneFirst = Math.random() > 0.5;\r\n    var size = genomeOne.size;\r\n    var newGenome = new Genome(size, false);\r\n    for (let index = 0; index < size; index++) {\r\n      if (takeFromParentOneFirst) {\r\n        newGenome.chromosomes[index] = genomeOne.chromosomes[index];\r\n      } else {\r\n        newGenome.chromosomes[index] = genomeTwo.chromosomes[index];\r\n      }\r\n\r\n      takeFromParentOneFirst = !takeFromParentOneFirst;\r\n    }\r\n\r\n    return newGenome;\r\n  }\r\n\r\n  toString() {\r\n    return this.chromosomes.join(":");\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/neuron.js\nclass Neuron {\r\n  constructor(type, game) {\r\n    this.type = type;\r\n    this.game = game;\r\n    this.connections = [];\r\n    this.lastValue = 0;\r\n  }\r\n\r\n  scaleValue(value, xMin, xMax, yMin, yMax) {\r\n    var percent = (value - yMin) / (yMax - yMin);\r\n    return percent * (xMax - xMin) + xMin;\r\n  }\r\n\r\n  addConnection(connection) {\r\n    this.connections.push(connection);\r\n  }\r\n\r\n  updateLastValue(lastValue) {\r\n    this.lastValue = lastValue;\r\n  }\r\n\r\n  getValue(creature) {\r\n    return this.lastValue;\r\n  }\r\n\r\n  applyAction(creature) {\r\n    return;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.type}`;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/inputs/SensitivityToProximityToEast.js\n\r\n\r\nclass SensitivityToProximityToEast_SensitivityToProximityToEast extends Neuron {\r\n  constructor(game) {\r\n    super("SensitivityToProximityToEast", game);\r\n  }\r\n\r\n  getValue(creature) {\r\n    var scaledGameWidth = this.game.width * this.game.divisionSize;\r\n    var scaledInput = this.scaleValue(creature.position.x, 0, 1, 0, scaledGameWidth);\r\n    return scaledInput;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/inputs/SensitivityToProximityToWest.js\n\r\n\r\nclass SensitivityToProximityToWest_SensitivityToProximityToWest extends Neuron {\r\n  constructor(game) {\r\n    super("SensitivityToProximityToWest", game);\r\n  }\r\n\r\n  getValue(creature) {\r\n    var scaledGameWidth = this.game.width * this.game.divisionSize;\r\n    var invertedX = scaledGameWidth - creature.position.x;\r\n    var scaledInput = this.scaleValue(invertedX, 0, 1, 0, scaledGameWidth);\r\n    return scaledInput;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/inputs/SensitivityToProximityToSouth.js\n\r\n\r\nclass SensitivityToProximityToSouth_SensitivityToProximityToSouth extends Neuron {\r\n  constructor(game) {\r\n    super("SensitivityToProximityToSouth", game);\r\n  }\r\n\r\n  getValue(creature) {\r\n    var scaledGameHeight = this.game.height * this.game.divisionSize;\r\n    var scaledInput = this.scaleValue(creature.position.y, 0, 1, 0, scaledGameHeight);\r\n    return scaledInput;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/inputs/SensitivityToProximityToNorth.js\n\r\n\r\nclass SensitivityToProximityToNorth_SensitivityToProximityToNorth extends Neuron {\r\n  constructor(game) {\r\n    super("SensitivityToProximityToNorth", game);\r\n  }\r\n\r\n  /*\r\n    if creature.y = 0 return 1\r\n    if creature.y = 128 return 0\r\n  */\r\n  getValue(creature) {\r\n    var scaledGameHeight = this.game.height * this.game.divisionSize;\r\n    var invertedY = scaledGameHeight - creature.position.y;\r\n    var scaledInput = this.scaleValue(invertedY, 0, 1, 0, scaledGameHeight);\r\n    return scaledInput;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/bit-operations.js\nfunction checkBit(number, bitToCheck) {\r\n  var mask = (1 << bitToCheck) >>> 0;\r\n  var result = (number & mask) >>> 0;\r\n  return result !== 0;\r\n}\r\n\r\nfunction slice(number, start, end) {\r\n  var mask = Math.pow(2, end - start + 1) - 1;\r\n  mask = mask << start;\r\n  var result = number & mask;\r\n  return result >> start;\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/connection.js\nclass Connection {\r\n  constructor(source, sink, weight) {\r\n    this.source = source;\r\n    this.sink = sink;\r\n    this.weight = weight;\r\n  }\r\n\r\n  toString() {\r\n    return `${this.source}:${this.sink}:${this.weight}`;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoNorth.js\n\r\n\r\nclass GoNorth_GoNorth extends Neuron {\r\n  constructor() {\r\n    super("GoNorth");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y -= creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoNorthEast.js\n\r\n\r\nclass GoNorthEast_GoNorthEast extends Neuron {\r\n  constructor() {\r\n    super("GoNorthEast");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y -= creature.speed * creature.dimensions.width;\r\n    creature.position.x += creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoEast.js\n\r\n\r\nclass GoEast_GoEast extends Neuron {\r\n  constructor() {\r\n    super("GoEast");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.x += creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoSouthEast.js\n\r\n\r\nclass GoSouthEast_GoSouthEast extends Neuron {\r\n  constructor() {\r\n    super("GoSouthEast");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.x += creature.speed * creature.dimensions.width;\r\n    creature.position.y += creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoSouth.js\n\r\n\r\nclass GoSouth_GoSouth extends Neuron {\r\n  constructor() {\r\n    super("GoSouth");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y += creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoSouthWest.js\n\r\n\r\nclass GoSouthWest_GoSouthWest extends Neuron {\r\n  constructor() {\r\n    super("GoSouthWest");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y += creature.speed * creature.dimensions.width;\r\n    creature.position.x -= creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoWest.js\n\r\n\r\nclass GoWest_GoWest extends Neuron {\r\n  constructor() {\r\n    super("GoWest");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.x -= creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/GoNorthWest.js\n\r\n\r\nclass GoNorthWest_GoNorthWest extends Neuron {\r\n  constructor() {\r\n    super("GoNorthWest");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    creature.position.y -= creature.speed * creature.dimensions.width;\r\n    creature.position.x -= creature.speed * creature.dimensions.width;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/outputs/DoNothing.js\n\r\n\r\nclass DoNothing_DoNothing extends Neuron {\r\n  constructor() {\r\n    super("DoNothing");\r\n  }\r\n\r\n  applyAction(creature) {\r\n    return;\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/nn/neural-network.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass neural_network_NeuralNetwork {\r\n  constructor(numberOfHiddenNeurons, genome, sensitivityNeuronFactory) {\r\n    this.genome = genome;\r\n    this.hiddenNeurons = new Array(numberOfHiddenNeurons);\r\n\r\n    for (let index = 0; index < this.hiddenNeurons.length; index++) {\r\n      this.hiddenNeurons[index] = new Neuron(`Hidden Layer ${index}`);\r\n    }\r\n\r\n    this.inputNeurons = [\r\n      sensitivityNeuronFactory("SensitivityToProximityToEast"),\r\n      sensitivityNeuronFactory("SensitivityToProximityToNorth"),\r\n      sensitivityNeuronFactory("SensitivityToProximityToSouth"),\r\n      sensitivityNeuronFactory("SensitivityToProximityToWest"),\r\n    ];\r\n\r\n    this.outputNeurons = [\r\n      new DoNothing_DoNothing(),\r\n      new GoNorth_GoNorth(),\r\n      new GoNorthEast_GoNorthEast(),\r\n      new GoEast_GoEast(),\r\n      new GoSouthEast_GoSouthEast(),\r\n      new GoSouth_GoSouth(),\r\n      new GoSouthWest_GoSouthWest(),\r\n      new GoWest_GoWest(),\r\n      new GoNorthWest_GoNorthWest(),\r\n    ];\r\n\r\n    for (let index = 0; index < this.genome.size; index++) {\r\n      var chromosome = this.genome.chromosomes[index];\r\n      this.addConnection(chromosome);\r\n    }\r\n  }\r\n\r\n  scaleWeight(weight, xMin, xMax, yMin, yMax) {\r\n    var percent = (weight - yMin) / (yMax - yMin);\r\n    return percent * (xMax - xMin) + xMin;\r\n  }\r\n\r\n  // first bit is source type (i.e 0 = sensor neuron, or 1 hidden neuron)\r\n  // next 5 bits determine which instance of that source type we have\r\n  // next bit is the sink type (i.e an internal neuron or an action/output neuron)\r\n  // next 20 bits is the weight of the connection\r\n\r\n  //      31| 30-26 | 25| 24-20 |19-----------------0\r\n  //       1| 01110 | 0 | 11000 |10010111001011000101\r\n  //E.g.   0| 00011 | 0 | 01100 |11001100110011001100\r\n  //                             10000000000000000000\r\n  //                             11111111111111111111 = 0 to 1048575\r\n  addConnection(chromosome) {\r\n    var sourceIsAnInputNeuron = checkBit(chromosome, 31); // 0 based index on the bits, i.e. 0 is furthest right (least significant bit)\r\n    var getSourceInstance = slice(chromosome, 26, 30) % (sourceIsAnInputNeuron ? this.inputNeurons.length : this.hiddenNeurons.length);\r\n    var sinkIsAnOutputNeuron = checkBit(chromosome, 25);\r\n    var getOutputInstance = slice(chromosome, 20, 24) % (sinkIsAnOutputNeuron ? this.outputNeurons.length : this.hiddenNeurons.length);\r\n    var weight = this.scaleWeight(slice(chromosome, 0, 19), -4, 4, 0, 1048575);\r\n\r\n    var source;\r\n    var sink;\r\n\r\n    if (sourceIsAnInputNeuron) {\r\n      // get the sensor type\r\n      source = this.inputNeurons[getSourceInstance];\r\n    } else {\r\n      // this is a hidden layer neuron\r\n      source = this.hiddenNeurons[getSourceInstance];\r\n    }\r\n\r\n    if (sinkIsAnOutputNeuron) {\r\n      // get the action type\r\n      sink = this.outputNeurons[getOutputInstance];\r\n    } else {\r\n      // this is a hidden layer neuron\r\n      sink = this.hiddenNeurons[getOutputInstance];\r\n    }\r\n\r\n    sink.addConnection(new Connection(source, sink, weight));\r\n  }\r\n\r\n  feedForward(creature) {\r\n    // Only return output neurons with a positive "probability"\r\n    return this.outputNeurons.filter((n) => {\r\n      var outputForN = this.feedForwardPer(n, creature);\r\n      n.updateLastValue(outputForN);\r\n      return outputForN > 0;\r\n    });\r\n  }\r\n\r\n  feedForwardPer(neuron, creature) {\r\n    var depth = 0;\r\n\r\n    let getInput = (connection, seenNodes) => {\r\n      depth++;\r\n      if (depth > 15) {\r\n        debugger;\r\n      }\r\n      // this connection has a source and a weight, need to get the source input value * weight and return that\r\n      var sink = connection.sink;\r\n      var source = connection.source;\r\n      var weight = connection.weight;\r\n      seenNodes.set(sink, sink.getValue(creature));\r\n\r\n      if (seenNodes.has(source)) {\r\n        return seenNodes.get(source);\r\n      } else if (source.connections.length === 0) {\r\n        // we\'re at the top of the tree so return the value of the input * weight\r\n        var input = source.getValue(creature);\r\n        return input * weight;\r\n      } else {\r\n        // we still have more connections to get\r\n        var sumOfWeightedInputs = 0;\r\n        for (let index = 0; index < source.connections.length; index++) {\r\n          const connection = source.connections[index];\r\n          sumOfWeightedInputs += getInput(connection, seenNodes);\r\n        }\r\n\r\n        return Math.tanh(sumOfWeightedInputs);\r\n      }\r\n    };\r\n\r\n    var sumOfWeightedInputs = 0;\r\n    for (let index = 0; index < neuron.connections.length; index++) {\r\n      const seenNodes = new Map();\r\n      const connection = neuron.connections[index];\r\n      sumOfWeightedInputs += getInput(connection, seenNodes);\r\n    }\r\n    return Math.tanh(sumOfWeightedInputs);\r\n  }\r\n}\r\n\n// CONCATENATED MODULE: ./src/simulation.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return simulation_Simulation; });\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass simulation_Simulation {\r\n  constructor(\r\n    sizeOfPopulation,\r\n    numberOfGenerationsToRun,\r\n    movesPerGeneration,\r\n    framesPerSecond,\r\n    sizeOfGenome,\r\n    numberOfNeuronsInHiddenLayer,\r\n    mutationRate,\r\n    successCriteriaVisualization\r\n  ) {\r\n    this.sizeOfPopulation = sizeOfPopulation;\r\n    this.numberOfGenerationsToRun = numberOfGenerationsToRun;\r\n    this.movesPerGeneration = movesPerGeneration;\r\n    this.framesPerSecond = framesPerSecond;\r\n    this.sizeOfGenome = sizeOfGenome;\r\n    this.numberOfNeuronsInHiddenLayer = numberOfNeuronsInHiddenLayer;\r\n    this.mutationRate = mutationRate;\r\n    this.successCriteriaVisualization = successCriteriaVisualization;\r\n\r\n    this._sensitivityNeuronFactory = (game) => (type) => {\r\n      switch (type) {\r\n        case "SensitivityToProximityToEast":\r\n          return new SensitivityToProximityToEast_SensitivityToProximityToEast(game);\r\n        case "SensitivityToProximityToWest":\r\n          return new SensitivityToProximityToWest_SensitivityToProximityToWest(game);\r\n        case "SensitivityToProximityToSouth":\r\n          return new SensitivityToProximityToSouth_SensitivityToProximityToSouth(game);\r\n        case "SensitivityToProximityToNorth":\r\n          return new SensitivityToProximityToNorth_SensitivityToProximityToNorth(game);\r\n        default:\r\n          break;\r\n      }\r\n    };\r\n\r\n    this.currentStepCount = 0;\r\n    this.currentGenerationCount = 0;\r\n    this.generationCountLabel = document.createElement("h1");\r\n    document.body.appendChild(this.generationCountLabel);\r\n    this.stepCountLabel = document.createElement("h1");\r\n    document.body.appendChild(this.stepCountLabel);\r\n  }\r\n\r\n  _randomNumberBetween(min, max) {\r\n    return Math.floor(Math.random() * (max - min) + 1);\r\n  }\r\n\r\n  _roundToNearest(numberToRound, valueToNearest) {\r\n    return Math.ceil(numberToRound / valueToNearest) * valueToNearest;\r\n  }\r\n\r\n  _getPositionWithin(game) {\r\n    return this._roundToNearest(this._randomNumberBetween(0, game.width * game.divisionSize - game.divisionSize), game.divisionSize);\r\n  }\r\n\r\n  _initialiseGame() {\r\n    this.game = new Game(128, 128, 5, false, this.successCriteriaVisualization);\r\n  }\r\n\r\n  _generateInitialCohort() {\r\n    for (let index = 0; index < this.sizeOfPopulation; index++) {\r\n      // 0,0 to 635,635\r\n      const genome = new Genome(this.sizeOfGenome);\r\n      const neuralNetwork = new neural_network_NeuralNetwork(this.numberOfNeuronsInHiddenLayer, genome, this._sensitivityNeuronFactory(this.game));\r\n      const creature = new Creature(\r\n        genome,\r\n        neuralNetwork,\r\n        this._getPositionWithin(this.game),\r\n        this._getPositionWithin(this.game),\r\n        this.game.divisionSize,\r\n        this.game.width,\r\n        this.game.height,\r\n        1,\r\n        false\r\n      );\r\n      this.game.addCreature(creature);\r\n    }\r\n  }\r\n\r\n  _generateNextCohort(survivors) {\r\n    this.game.gameCreatures = [];\r\n    for (let indexOne = 0, indexTwo = 2; indexTwo < survivors.length; indexOne++, indexTwo++) {\r\n      const parentOne = survivors[indexOne];\r\n      const parentTwo = survivors[indexOne + 1];\r\n      const parentOneGenome = parentOne.genome;\r\n      const parentTwoGenome = parentTwo.genome;\r\n      var childGenomeOne = Genome.createNewGenomeFromParents(parentOneGenome, parentTwoGenome);\r\n      var childGenomeTwo = Genome.createNewGenomeFromParents(parentTwoGenome, parentOneGenome);\r\n      const neuralNetworkOne = new neural_network_NeuralNetwork(\r\n        this.numberOfNeuronsInHiddenLayer,\r\n        childGenomeOne,\r\n        this._sensitivityNeuronFactory(this.game)\r\n      );\r\n      const neuralNetworkTwo = new neural_network_NeuralNetwork(\r\n        this.numberOfNeuronsInHiddenLayer,\r\n        childGenomeTwo,\r\n        this._sensitivityNeuronFactory(this.game)\r\n      );\r\n\r\n      const creatureOne = new Creature(\r\n        childGenomeOne,\r\n        neuralNetworkOne,\r\n        this._getPositionWithin(this.game),\r\n        this._getPositionWithin(this.game),\r\n        this.game.divisionSize,\r\n        this.game.width,\r\n        this.game.height,\r\n        1,\r\n        false\r\n      );\r\n\r\n      const creatureTwo = new Creature(\r\n        childGenomeTwo,\r\n        neuralNetworkTwo,\r\n        this._getPositionWithin(this.game),\r\n        this._getPositionWithin(this.game),\r\n        this.game.divisionSize,\r\n        this.game.width,\r\n        this.game.height,\r\n        1,\r\n        false\r\n      );\r\n\r\n      this.game.addCreature(creatureOne);\r\n      this.game.addCreature(creatureTwo);\r\n    }\r\n  }\r\n\r\n  _animate() {\r\n    this.stepCountLabel.innerText = `Generation Step Count: ${this.currentStepCount++}`;\r\n    this.game.update();\r\n    if (this.currentStepCount <= this.movesPerGeneration) {\r\n      setTimeout(() => requestAnimationFrame(this._animate.bind(this)), 1000 / this.framesPerSecond);\r\n    } else {\r\n      // This generation has finished, time to get the survivors to reproduce\r\n      // Then set the board back with the new generation\r\n      this.generationCountLabel.innerText = `Gen ${++this.currentGenerationCount}`;\r\n      const survivors = this.game.getSurvivors(this.successCriteriaVisualization.successCriteria);\r\n      console.log(`Number of survivors ${survivors.length}.`);\r\n      this._generateNextCohort(survivors);\r\n      this.currentStepCount = 0;\r\n      this._animate();\r\n    }\r\n  }\r\n\r\n  start() {\r\n    this.generationCountLabel.innerText = `Gen ${this.currentGenerationCount}`;\r\n    this._initialiseGame();\r\n    this._generateInitialCohort();\r\n    this._animate();\r\n  }\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n')}]);